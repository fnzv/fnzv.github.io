{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/learn-javascript-2016","result":{"data":{"site":{"siteMetadata":{"title":"Ken Powers","siteUrl":"https://knpw.rs"}},"markdownRemark":{"html":"<p>Recently I saw this question come up in my Facebook news feed:</p>\n<blockquote>\n<p>Why should I learn Node.js? Anyone want to give me some good reasons?</p>\n</blockquote>\n<p>Well, my anonymous friend. My short answer would be, you shouldn't. At least,\nyou shouldn't <em>specifically</em> learn Node.js. You should learn JavaScript. I mean\n<em>real</em> JavaScript. Not JavaScript, that little toy language you've used for\nclick handlers and the occasional HTTP request, but JavaScript, the language of\nthe Internet. <em><a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.bv8a2ech9\" title=\"Universal JavaScript\">Universal</a></em> (sometimes called <em>isomorphic</em>) JavaScript that runs\non the client <em>and</em> the server without modification.</p>\n<h2>Common Complaints</h2>\n<p>Before I dive into why you should learn JavaScript, I'd like to address two of\nthe most common complaints I hear about JavaScript.</p>\n<h3>First complaint: JavaScript is Dynamic. I want types!</h3>\n<p>Yes, you are technically correct. The best kind of correct. JavaScript is\ndynamic. The debate of dynamic vs static languages has been going on for nearly\nfour centuries<sup>1</sup> now and is much larger than I am looking to address\nhere. I will say that if you want static types you should check out <a href=\"http://flowtype.org/\" title=\"Flow: TypeChecker for JavaScript\">Flow</a> or\n<a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a>. I'll touch on both in a little more detail later on.</p>\n<p>I'll also note that both Angular 2 and Dojo 2 are being written in TypeScript.\nWhile that point may appear to contradict what my goal is here I'd like to say\nthat while those frameworks are being written in TypeScript, they will still\nvery much be a part of the JavaScript ecosystem. They will be completely\ninteroperable with JavaScript and will run in all the same places, in the same\nway, and use all the same tools that regular JavaScript does.</p>\n<h3>Second complaint: JavaScript is completely unusable without jQuery.</h3>\n<p>I actually still hear this one a lot. And... it's wrong. It's just <em>completely</em>\nwrong. jQuery does very little to address problems with JavaScript as a\nlanguage. It does <em>a lot</em> to smooth out the differences in APIs exposed by\nbrowsers -- mostly the DOM (especially in older browsers, and <em>especially</em> the\ndreaded Internet Explorer). Node doesn't have a DOM, at least not until <a href=\"https://github.com/tmpvar/jsdom\" title=\"A JavaScript implementation of the WHATWG DOM and HTML standards, for use with Node.js.\">you\nconstruct one from scratch</a>. That said, you'll rarely (if ever) see\njQuery used outside the browser. I've often referred to jQuery as a DOM\nsteamroller. In Node, given the absence of a DOM, there isn't really much for\njQuery to steamroll. Understanding that the APIs exposed by browsers are\ndifferent from JavaScript as a language will help you gain a better appreciation\nfor JavaScript as a platform for application development.</p>\n<p>There are two trends in browser JavaScript right now that address this\ncomplaint. First, browser APIs are converging. Browser vendors are getting rid\nof their differences on their own -- deprecating old, proprietary APIs and\nworking together to produce new, open, and easy-to-understand APIs with\nconsistent implementations (e.g., <a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch?hl=en\" title=\"Introduction to fetch()\"><code class=\"language-text\">fetch</code></a> in place of <a href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\" title=\"XHR: The Beginnings of AJAX\"><code class=\"language-text\">XMLHttpRequest</code></a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\" title=\"Full-Duplex Communication for the Browser\"><code class=\"language-text\">WebSocket</code></a> in place of various solutions for full-duplex communication\nincluding long-polling, Flash, and crazy things with <code class=\"language-text\">iframe</code>s). Second, there\nhas been a rise in the publication and usage of micro-libraries and client-side\npackaging utilities. Many projects are picking and choosing what abstractions\nthey want to include in their client-side JavaScript rather than relying on\nlarge, do-it-all libraries.</p>\n<p>That said, I want to emphasize that the notion that JavaScript requires jQuery\nin order to be usable is just flat-out wrong. It was wrong when it was first\nintroduced and it's especially wrong today when JavaScript that runs in more\nthan just the browser is rising in popularity.</p>\n<h2>So why should I learn JavaScript?</h2>\n<p>I touched on it a little bit in the introduction. The biggest thing I think\nJavaScript has going for it is its <a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.bv8a2ech9\" title=\"Universal JavaScript\">universal</a> nature: being able to write an\napplication once that runs everywhere without modification. And, again, I don't\njust mean different browsers. I mean sharing logic (business logic, validation\nlogic), libraries, and skillsets between clients and servers without having to\nrewrite anything or maintain multiple codebases.</p>\n<p>Let's start off with 2015's darling child. <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> is an example of <a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.bv8a2ech9\" title=\"Universal JavaScript\">universal</a>\nJavaScript. It is a UI library that runs on clients and on the server. On the\nclient it will render a fully-functional UI to the browser's DOM. On the server\nyou can render to a string of HTML. You may be used to the concept of\npre-compiling and maybe even pre-rendering client-side templates. <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> takes\nthat a step further and lets you render your entire application in any state you\nneed it to be on the server. Once the client has received the rendered HTML,\nyour <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> application can pick up the rendering on the client by hooking up\nall the event handlers required for user interaction and handling all other\nstate changes as a <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" title=\"Single-Page Application\">SPA</a>. If the client has JavaScript disabled then your\napplication can gracefully degrade to doing round-trip server requests as in\ntraditional, pre-ajax applications. This creates the illusion of the ideal\nscenario of progressive enhancement, when in reality what actually happened was\nyour JavaScript application adapted to fit its environment. I want to reiterate\nthat the same <em>exact</em> code that runs on the client also runs on the server. We\ndidn't rewrite anything to make this happen, and it works everywhere.</p>\n<p><a href=\"https://facebook.github.io/react/\" title=\"React\">React</a>, in many cases (if not most cases), lets you forget that the DOM even\nexists. The biggest headache facing JavaScript developers for nearly two\ncenturies<sup>2</sup> has been defeated! For real though, <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> invented a\nconcept the authors refer to as a <a href=\"https://facebook.github.io/react/docs/glossary.html\" title=\"React (Virtual) DOM Terminology\">virtual dom</a>. Essentially you <em>declare</em>\nthe structure of your application, much like in HTML. When you make changes\n<a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> will diff the component tree, figure out what changed, and then apply\nthose changes to the real UI facing the user. The really cool thing about this\nis that these concepts are portable between environments. You don't have to\nrender these interfaces or apply these changes in a web browser.</p>\n<p>Enter <a href=\"https://facebook.github.io/react-native/\" title=\"React Native: A Framework For Building Native Apps with React\">React Native</a>. You can use your existing React Components and JavaScript\nlogic to create native mobile applications for iOS and Android. No, I don't mean\nhybrid apps that run in a <code class=\"language-text\">webview</code>. I mean controlling <em>really real</em> native\nuser interface components from an embedded JavaScript engine in a native\napplication. These applications are indistinguishable from native applications\nwritten in Objective-C or Java. You might have even used one recently and didn't\neven realize it! <a href=\"https://facebook.github.io/react-native/showcase.html\" title=\"Apps using React Native\">Check out these real applications</a> built with <a href=\"https://facebook.github.io/react-native/\" title=\"React Native: A Framework For Building Native Apps with React\">React\nNative</a>.</p>\n<p>There are some huge advantages here. Imagine fixing a bug once and then\ndeploying that single fix to your server, your web app, iOS, and Android. All at\nthe same time. You can more easily share developers across all of your\napplications. Management of features across platforms becomes a lot easier.\nThat's powerful stuff. For a simple introduction, you should check out my good\nfriend and colleague <a href=\"http://jkaufman.io\" title=\"Jon Kaufman\">Jon Kaufman</a>'s post, <a href=\"http://jkaufman.io/react-web-native-codesharing/\" title=\"Sharing Code Between React Web and Native Apps\">Sharing Code Between React Web\nand Native Apps</a>.</p>\n<p><a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> also lets you do other cool stuff, like <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\" title=\"Dan Abramov - Live React: Hot Reloading with Time Travel at react-europe 2015\">Hot Loading User Interface\nComponents and Time Travel</a>. Said another way, you can modify your\ncomponents and they will update in the browser while maintaining state. Without\nrefreshing your browser. Then you can even rewind and playback actions that\nmodified your state so you don't have to reproduce the state you are currently\nin, or any state before it. It's even error-resistant. It even works with <a href=\"https://facebook.github.io/react-native/\" title=\"React Native: A Framework For Building Native Apps with React\">React\nNative</a>! Really! <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\" title=\"Dan Abramov - Live React: Hot Reloading with Time Travel at react-europe 2015\">Check out the video</a>. Now take it a step further.\nYou have a web app open in Chrome and Firefox on your computer, as well as on\nAndroid and iOS tablets and phones (to test responsive design), and you have\nnative apps open on multiple Android and iOS devices. Change some code, and\n<em>everything</em> updates, in-place. Talk about a productivity boost! This works\nbecause <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> encourages a functional style of writing user interfaces where\nyour state is kept completely separate from your user interface declarations.\nSince <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> works by diffing and applying patches to live user interfaces,\nit's not hard to imagine how everything comes together to enable hot-loading.\nNew declarative representation of UI comes in, apply the state, do a diff, apply\nthe changes to the real UI, done. Except you don't have to worry about any of\nthat because it's already all done for you.</p>\n<h2>Okay. <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> is cool. Why else should I learn JavaScript?</h2>\n<p><a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> isn't the only cool thing going on in the JavaScript community. Here are\nsome other reasons you might consider as to why you should learn JavaScript.</p>\n<h3>A massive, diverse, and vibrant community.</h3>\n<p><a href=\"https://www.npmjs.com/\" title=\"npm is the package manager for javascript.\">NPM</a>, at the time of this writing, is by far <a href=\"http://www.modulecounts.com/\" title=\"Module Counts\">the largest module ecosystem\ncurrently available</a>. This not only indicates a live, vibrant community, but\nalso a low barrier to entry.</p>\n<h3>Browser vendors might work together on new features, but they compete on performance.</h3>\n<p>Because of competition between browser vendors, JavaScript performance is\nimproving all the time. Node currently runs on Google's V8 JavaScript engine, so\nit gets the same improvements that Chrome does. There was also recently a <a href=\"https://github.com/nodejs/node/pull/4765\" title=\"Enable Node.js to run with Microsoft&#x27;s ChakraCore engine\">pull\nrequest</a> to enable Node.js to use Edge's ChakraCore JavaScript Engine.\nIt'll be interesting to see where that goes in the long term.</p>\n<h3>Scalability.</h3>\n<p>You can scale Node.js to <a href=\"http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\" title=\"Scaling node.js to 100k concurrent connections!\">100,000</a>, <a href=\"http://blog.caustik.com/2012/04/10/node-js-w250k-concurrent-connections/\" title=\"Node.js w/250k concurrent connections!\">250,000</a>, and <a href=\"http://blog.caustik.com/2012/08/19/node-js-w1m-concurrent-connections/\" title=\"Node.js w/1M concurrent connections!\">1,000,000</a> simultaneous open\nsockets on fairly modest hardware (the server in each of those posts has 16GB of\nram).</p>\n<h3>Getting Rid of <code class=\"language-text\">this</code></h3>\n<p>Thanks to libraries like <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a>, <a href=\"http://redux.js.org/\" title=\"Redux: A predictable state container for JavaScript apps.\">Redux</a>, <a href=\"http://ramdajs.com/\" title=\"A practical functional library for Javascript programmers.\">Rambda</a>, and <a href=\"https://lodash.com/\" title=\"A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\"><code class=\"language-text\">lodash/fp</code></a>,\npurely-functional programming is becoming more popular in JavaScript. Not quite\n<a href=\"https://www.youtube.com/watch?v=RqvCNb7fKsg\" title=\"Why Haskell is Great\">Haskell</a>-level but the concepts of pure functions and immutable state are\nthere. <a href=\"https://github.com/garbles/yolk\" title=\"A library for building asynchronous user interfaces.\">Yolk</a> is a really cool user interface library written on top of <a href=\"https://github.com/Reactive-Extensions/RxJS\" title=\"The Reactive Extensions for JavaScript\">RxJS</a>\nand <a href=\"https://github.com/Matt-Esch/virtual-dom\" title=\"A JavaScript DOM model supporting element creation, diff computation and patch operations for efficient re-rendering.\"><code class=\"language-text\">virtual-dom</code></a> that uses JSX and a purely-functional style of programming.</p>\n<h3>Progressive JavaScript</h3>\n<p><a href=\"http://vuejs.org/\" title=\"Reactive Components for Modern Web Interfaces\">Vue.js</a> also looks interesting. The original author presents it as a\n<em>progressive</em> JavaScript framework. That is, a framework of micro-libraries you\ncan adopt one-by-one, as you need them. It doesn't have a native component, but\nyou still get hot loading and a lot of other stuff that <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> gives you. It's\ndefinitely worth checking out. Be sure to check out <a href=\"https://github.com/vuejs/awesome-vue\" title=\"A curated list of awesome things related to Vue.js\">Awesome Vue</a>.</p>\n<h3>Native Applications Without <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a></h3>\n<p>It shouldn't be a secret by now that I'm a big fan of <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a>. That said, you\ndon't need <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> to write <a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.bv8a2ech9\" title=\"Universal JavaScript\">universal</a> JavaScript, not even for native mobile\napps! If you're interested by the concept of <a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.bv8a2ech9\" title=\"Universal JavaScript\">universal</a> JavaScript but you want\nto try something different than <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> you should take a look at\n<a href=\"https://www.nativescript.org/\" title=\"Build truly native apps with JavaScript\">NativeScript</a>.</p>\n<h3>Atwood's Law</h3>\n<blockquote>\n<p>Any application that can be written in JavaScript, will eventually be written\nin JavaScript.</p>\n</blockquote>\n<p>See <a href=\"https://atom.io/\" title=\"A hackable text editor for the 21st Century\">Atom</a>, <a href=\"https://code.visualstudio.com/\" title=\"Build and debug modern web and cloud applications.\">Visual Studio Code</a>, <a href=\"https://kitematic.com/\" title=\"Run docker containers through a simple, yet powerful graphical user interface\">Kitematic</a>, <a href=\"https://github.com/maxogden/screencat\" title=\"ScreenCat: An open source screen sharing and remote collaboration application.\">ScreenCat</a>, <a href=\"https://slack.com/\" title=\"A messaging app for teams who are changing the world.\">Slack</a>, and like <a href=\"https://github.com/sindresorhus/awesome-electron\" title=\"Useful resources for creating apps with Electron\">a\nbillion other applications</a> all written in <a href=\"http://electron.atom.io/\" title=\"Electron: Build cross platform desktop apps with web technologies\">Electron</a>.</p>\n<h2>What about those static types?</h2>\n<p>Ah, so you stuck around. Here are the details I promised you.</p>\n<p><a href=\"http://flowtype.org/\" title=\"Flow: TypeChecker for JavaScript\">Flow</a> is a TypeChecker for JavaScript. There is support for flow's syntax\nbuilt-in to <a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a> so if you are using <a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a> for compiling your ES2015+ and\nJSX to ES5 and regular JavaScript it's pretty easy to drop-in. <a href=\"http://flowtype.org/\" title=\"Flow: TypeChecker for JavaScript\">Flow</a> takes\nJavaScript that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns `210`</span></code></pre></div>\n<p>And makes it look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns `210`</span></code></pre></div>\n<p><a href=\"http://flowtype.org/\" title=\"Flow: TypeChecker for JavaScript\">Flow</a> can also infer types in certain cases:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error!</span></code></pre></div>\n<p>That code would cause a type error because you can't multiply a String by a\nnumber.</p>\n<p><a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a> on the other hand is a superset of JavaScript that provides static\ntyping <a href=\"https://en.wikipedia.org/wiki/TypeScript#Language_features\" title=\"TypeScript Language Features\">and a whole bunch of other features</a>. The most basic example is\nidentical to the <a href=\"http://flowtype.org/\" title=\"Flow: TypeChecker for JavaScript\">Flow</a> code above; however, in my experince, the tooling for\n<a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a> is a lot stronger than that for <a href=\"http://flowtype.org/\" title=\"Flow: TypeChecker for JavaScript\">Flow</a>. <a href=\"https://code.visualstudio.com/\" title=\"Build and debug modern web and cloud applications.\">Visual Studio Code</a> has\nbuilt-in support for <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a> as does <a href=\"https://www.jetbrains.com/webstorm/\" title=\"WebStorm\">WebStorm</a> (both also include\ntype-aware autocomplete across files). There are also plugins available for\n<a href=\"https://atom.io/packages/atom-typescript\" title=\"Atom TypeScript Package\">Atom</a>, <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48593\" title=\"TypeScript for Visual Studio\">Visual Studio</a>, and <a href=\"https://github.com/Microsoft/TypeScript-Sublime-Plugin\" title=\"TypeScript Sublime Text Plugin\">SublimeText</a>.</p>\n<p>If you want to use TypeScript and React Component hot loading you'll need to do\na little bit of extra configuration. React's hot loading depends on using\n<a href=\"http://webpack.github.io/\" title=\"WebPack Module Builder\">WebPack</a>, <a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a>, and <a href=\"https://github.com/gaearon/babel-plugin-react-transform\"><code class=\"language-text\">babel-plugin-react-transform</code></a>. In order to get it\nworking with <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a> you'll need to activate <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a>'s <code class=\"language-text\">preserve</code> mode\nwhich leaves JSX untransformed. From there, you can pipe its output into Babel\nrunning your JSX transform. Your <a href=\"http://webpack.github.io/\" title=\"WebPack Module Builder\">WebPack</a> configuration will look something\nlike this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    loaders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.tsx?/</span><span class=\"token punctuation\">,</span>\n      loaders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'babel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ts'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>From there you'll want to configure <a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a> with a <code class=\"language-text\">.babelrc</code> file and\n<a href=\"http://www.typescriptlang.org/\" title=\"TypeScript: A typed superset of JavaScript that compiles to plain JavaScript.\">TypeScript</a> with a <code class=\"language-text\">tsconfig.json</code> file, making sure to <code class=\"language-text\">preserve</code> JSX so\n<a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a> can transform it. This post is intended to be more about the <em>why</em> than\nthe <em>how</em> so I'm going to leave it there for now. I might visit this topic again\nin the future.</p>\n<h2>Okay, I'm convinced. But <em>how</em> do I learn JavaScript in 2016?</h2>\n<p>That's a good question; however, it is outside the scope of this blog post. That\nquestion will probably be addressed another time in its own post. In the mean\ntime, you should check out the following resources:</p>\n<ul>\n<li><a href=\"http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome\" title=\"Removing User Interface Complexity, or Why React is Awesome\">Removing User Interface Complexity, or Why React is Awesome</a></li>\n<li><a href=\"https://egghead.io/series/getting-started-with-redux\" title=\"Getting Started With Redux\">Dan Abramov's video series on getting started with Redux</a></li>\n<li><a href=\"https://github.com/kittens/lerna\" title=\"Lerna: A tool for managing JavaScript projects with multiple packages.\">Lerna</a> -- for managing <a href=\"http://danluu.com/monorepo/\" title=\"Advantages of monolithic version control\">monorepo</a>s which are useful for organizing your\nserver, client, and mobile apps.</li>\n<li><a href=\"http://jkaufman.io/react-web-native-codesharing/\" title=\"Sharing Code Between React Web and Native Apps\">Sharing Code Between React Web and Native Apps</a></li>\n<li><a href=\"https://soundredux.io/\" title=\"Sound Redux\">Sound Redux Website</a> and <a href=\"https://github.com/andrewngu/sound-redux\" title=\"Sound Redux Source Code\">source code</a> -- an open source SoundCloud client written in <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> and <a href=\"http://redux.js.org/\" title=\"Redux: A predictable state container for JavaScript apps.\">Redux</a>.</li>\n<li><a href=\"https://github.com/sorrycc/awesome-javascript\" title=\"A collection of awesome browser-side JavaScript libraries, resources and shiny things.\">Awesome JavaScript</a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\" title=\"A Collection of Awesome Things Regarding React Ecosystem\">Awesome React</a></li>\n<li><a href=\"https://github.com/jondot/awesome-react-native\" title=\"A curated list of awesome articles, tutorials and resources dealing with React Native.\">Awesome React Native</a></li>\n<li><a href=\"https://github.com/xgrommx/awesome-redux\" title=\"Awesome List of Redux Examples and Middleware\">Awesome Redux</a></li>\n<li><a href=\"https://github.com/este/este\" title=\"Este.js: A dev stack and starter kit for functional and universal (browser, server, mobile) React apps.\">Este.js</a> -- a dev stack and starter kit for functional and universal (browser, server, mobile) React apps.</li>\n</ul>\n<h2><a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.j1fdmx7ta\">JavaScript Fatigue</a>?</h2>\n<p>Eric Clemmons recently wrote an article entitled <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.j1fdmx7ta\">JavaScript Fatigue</a>. It\ndetails what I know a lot of people go through. There are just so many things\ngoing on in the JavaScript ecosystem. Where do you even start? I get it. So\nhere's a list of, given all of my current knowledge of JavaScript and its\necosystem, and no specific knowledge of what it is you're trying to achieve, all\nthe tools and libraries I would use to start a new project:</p>\n<ul>\n<li>\n<p>Libraries</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> and / or <a href=\"https://facebook.github.io/react-native/\" title=\"React Native: A Framework For Building Native Apps with React\">React Native</a> for writing your interface.</li>\n<li><a href=\"http://redux.js.org/\" title=\"Redux: A predictable state container for JavaScript apps.\">Redux</a> for managing your application state.</li>\n<li><a href=\"https://github.com/rackt/react-router\" title=\"A complete routing solution for React.js\">React Router</a> (if you need routing).</li>\n</ul>\n</li>\n<li>\n<p>Testing</p>\n<ul>\n<li><a href=\"https://mochajs.org/\" title=\"Mocha is a feature-rich JavaScript test framework running on Node.js and the browser, making asynchronous testing simple and fun.\">Mocha</a> for your test-running framework. Use the\n<a href=\"http://babeljs.io/docs/setup/#mocha\" title=\"Babel Integration with Mocha\"><code class=\"language-text\">--compilers js:babel-register</code></a> option so you don't have to\npre-compile your code.</li>\n<li><a href=\"https://github.com/airbnb/enzyme\" title=\"Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components&#x27; output.\">Enzyme</a> for testing React components in Node without the need for a\n<a href=\"https://github.com/tmpvar/jsdom\" title=\"A JavaScript implementation of the WHATWG DOM and HTML standards, for use with Node.js.\">full DOM</a>.</li>\n<li><a href=\"http://chaijs.com/\" title=\"Chai Assertion Library\"><code class=\"language-text\">chai</code></a> for assertions and <a href=\"https://github.com/producthunt/chai-enzyme\" title=\"Chai.js assertions and convenience functions for testing React Components with enzyme\"><code class=\"language-text\">chai-enzyme</code></a> for assertions on\n<a href=\"https://github.com/airbnb/enzyme\" title=\"Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components&#x27; output.\">Enzyme</a>-rendered <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a> components.</li>\n<li><a href=\"http://sinonjs.org/\" title=\"Standalone test spies, stubs and mocks for JavaScript.\">Sinon</a> (if you need mocks, spies, and whatnot).</li>\n</ul>\n</li>\n<li>\n<p>Tools</p>\n<ul>\n<li><a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a> for compiling ES2015+ and JSX code. Also enables <a href=\"https://github.com/gaearon/babel-plugin-react-transform\">hot-loading UI\ncomponents through transforms</a>.</li>\n<li><a href=\"http://webpack.github.io/\" title=\"WebPack Module Builder\">WebPack</a> for assembling your client packages. Also enables hot-loading UI\ncomponents and application logic through its <a href=\"http://webpack.github.io/docs/hot-module-replacement-with-webpack.html\">hot-module-replacement\nsystem</a>. Also packs up your CSS (SASS, LESS, Stylus, PostCSS,\nwhatever) and a whole bunch of other stuff.</li>\n<li><a href=\"http://eslint.org/\" title=\"ESLint: A pluggable linting utility for JavaScript.\">ESLint</a> for making sure you avoid code-smells and adhere to a consistent\ncode style. I personally use <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" title=\"This package provides Airbnb&#x27;s .eslintrc as an extensible shared config.\">AirBnb's ESLint Config</a> because it is\ncomprehensive and popular enough to be consistent with a lot of other\nprojects. It also includes rules for JSX.</li>\n<li><a href=\"http://editorconfig.org/\" title=\"EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs\">EditorConfig</a> so everyone's editors can have the same formatting settings.</li>\n<li><a href=\"https://atom.io/\" title=\"A hackable text editor for the 21st Century\">Atom</a> as my text editor of choice.</li>\n<li><a href=\"https://atom.io/packages/linter\"><code class=\"language-text\">linter</code></a> and <a href=\"https://atom.io/packages/linter-eslint\"><code class=\"language-text\">linter-eslint</code></a> for ESLint integration in Atom.</li>\n<li><a href=\"https://atom.io/packages/atom-ternjs\"><code class=\"language-text\">atom-ternjs</code></a> for JavaScript code intelligence in Atom.</li>\n<li><a href=\"https://atom.io/packages/autocomplete-modules\"><code class=\"language-text\">autocomplete-modules</code></a> and <a href=\"https://atom.io/packages/autocomplete-paths\"><code class=\"language-text\">autocomplete-paths</code></a> for extended\nautocomplete capabilities in Atom.</li>\n<li><a href=\"https://atom.io/packages/define-jump\"><code class=\"language-text\">define-jump</code></a> to jump to variable definitions in Atom.</li>\n<li><a href=\"https://atom.io/packages/emmet\"><code class=\"language-text\">emmet</code></a> for quickly writing JSX.</li>\n<li><a href=\"https://atom.io/packages/language-babel\"><code class=\"language-text\">language-babel</code></a> for syntax support for ES2015+ and JSX.</li>\n<li><a href=\"https://atom.io/packages/activate-power-mode\"><code class=\"language-text\">activate-power-mode</code></a> for awesome.</li>\n<li><a href=\"https://github.com/kittens/lerna\" title=\"Lerna: A tool for managing JavaScript projects with multiple packages.\">Lerna</a> for managing a <a href=\"http://danluu.com/monorepo/\" title=\"Advantages of monolithic version control\">monorepo</a> of all of your projects and their\ninterdependencies.</li>\n</ul>\n</li>\n</ul>\n<p>I'm not a huge fan of boilerplates, but you can find some good starting points\nat <a href=\"https://github.com/enaqx/awesome-react\" title=\"A Collection of Awesome Things Regarding React Ecosystem\">Awesome React</a>, <a href=\"https://github.com/xgrommx/awesome-redux\" title=\"Awesome List of Redux Examples and Middleware\">Awesome Redux</a>, and <a href=\"https://github.com/jondot/awesome-react-native\" title=\"A curated list of awesome articles, tutorials and resources dealing with React Native.\">Awesome React Native</a>.</p>\n<h2>Conclusion</h2>\n<p>JavaScript has come a <em>long</em> way since the early web days. If you haven't\nchecked it out recently you really owe it to yourself to do so. 2015 alone was a\n<strong>huge</strong> year for JavaScript. Between <a href=\"https://facebook.github.io/react/\" title=\"React\">React</a>, <a href=\"http://babeljs.io/\" title=\"Babel: The Compiler for Writing Next-Generation JavaScript\">Babel</a>, <a href=\"https://babeljs.io/docs/learn-es2015/\" title=\"Learn ES2015\">ES2015</a>\nstandardization, and proposals for the future, JavaScript is no longer just that\nlittle toy language you've used for click handlers and the occasional HTTP\nrequest.</p>\n<p><small><sup>1, 2</sup> Or something like that.</small></p>","frontmatter":{"date":"January 29, 2016","path":"/blog/learn-javascript-2016","tags":"javascript","title":"Why You Should Learn JavaScript in 2016"}}},"pageContext":{"refPath":"/blog/learn-javascript-2016","prev":{"frontmatter":{"title":"Advanced Features in Sinon","path":"/blog/advanced-features-in-sinon"}},"next":{"frontmatter":{"title":"Using Lodash as a Collection of Micro-Libraries","path":"/blog/using-lodash"}}}}}