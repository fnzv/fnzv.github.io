{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/advanced-features-in-sinon","result":{"data":{"site":{"siteMetadata":{"title":"Ken Powers","siteUrl":"https://knpw.rs"}},"markdownRemark":{"html":"<p>In <a href=\"/blog/testing-in-browsers-and-node/\" title=\"Testing in Browsers and Node with Mocha, Chai, Sinon, and Testem\">my previous post on testing</a> I covered the basics of testing with\n<a href=\"http://visionmedia.github.io/mocha/\" title=\"Mocha\">Mocha</a>, <a href=\"http://chaijs.com/\" title=\"Chai\">Chai</a>, and <a href=\"http://sinonjs.org/\" title=\"Sinon.JS\">Sinon</a> -- including asynchronous\ntesting and stubbing methods with asynchronous callbacks (such as methods\nwhich make a server request). That's all well and good, but sometimes it's\nmore convenient or natural to synchronously manipulate the JavaScript timer or\ncreate fake servers to instantly and synchronously respond to requests.\n<a href=\"http://sinonjs.org/\" title=\"Sinon.JS\">Sinon</a> provides the facilities to work such magic -- read on to learn\nmore.</p>\n<h2>Fake Timers</h2>\n<p>If you are testing code which uses <code class=\"language-text\">setTimeout</code> or <code class=\"language-text\">setInterval</code> it can be\ntricky to get the asynchronous test right and if your timeouts are of any\nsubstantial length your tests can take longer than ideal to complete. Sinon\nlets us replace the global <code class=\"language-text\">setTimeout</code> and <code class=\"language-text\">setInterval</code> functions with fake\nversions that we can control. Observe:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake timers'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Overwrite the global timer functions (setTimeout, setInterval) with Sinon fakes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Restore the global timer functions to their native implementations</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should synchronously advance the JavaScript clock'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a spy to record all calls</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call the spy in 1000ms</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Tick the clock forward 999ms</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The spy should not have been called yet</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Tick the clock forward 1ms</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Now the spy should have been called</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should also work with setInterval'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Faking the JavaScript clock also works with setInterval:</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>calledTwice<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>calledThrice<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we call <code class=\"language-text\">sinon.useFakeTimers()</code> Sinon replaces the global <code class=\"language-text\">setTimeout</code>\nand <code class=\"language-text\">setInterval</code> functions and returns a clock object we can control. By\ncalling <code class=\"language-text\">clock.tick(n)</code> we are able to advance the clock by <code class=\"language-text\">n</code> milliseconds.\nWhen the milliseconds we have ticked forward are greater than or equal to the\ndelay parameter given to a timeout or interval the respective callbacks are\ncalled synchronously. In our case the callback is a Sinon spy which we are\nable to examine for call details when we need to make assertions.</p>\n<h2>Ensuring Spy Call Order</h2>\n<p>Spies are capable of determining the order they were called relative to each\nother. We can demonstrate this by testing that a number of timeouts were\ntriggered in the proper order:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be able to verify call order'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create some spies</span>\n  <span class=\"token keyword\">var</span> spy1 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> spy2 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Set some timeouts</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>spy1<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>spy2<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Advance the clock</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expectations</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledBefore</span><span class=\"token punctuation\">(</span>spy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I am using <code class=\"language-text\">sinon-chai</code> but you can also verify call order using\n<code class=\"language-text\">spy.calledBefore(otherSpy)</code> and <code class=\"language-text\">spy.calledAfter(otherSpy)</code>.</p>\n<h2>Fake Requests</h2>\n<p>On to faking <code class=\"language-text\">XMLHttpRequest</code>! Sinon allows us to override the global\n<code class=\"language-text\">XMLHttpRequest</code> object and synchronously control its behavior. Consider the\nfollowing:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake requests'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Overwrite the global XMLHttpRequest with Sinon fakes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Create an array to store requests</span>\n    <span class=\"token keyword\">var</span> requests <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requests <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Keep references to created requests</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xhr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      requests<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Restore the global timer functions to their native implementations</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake XMLHttpRequests'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a spy</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Request using jQuery</span>\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Verify that the request is tracked -- not really necessary, just a demonstration</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Respond to the request</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The spy was called synchrnously, verify its call details.</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Before each test we set up the fake <code class=\"language-text\">XMLHttpRequest</code> and override <code class=\"language-text\">onCreate</code>\nso that we may track all requests we make using it. After each test we restore\nthe native <code class=\"language-text\">XMLHttpRequest</code> object. In the actual test we make a request with\njQuery, make sure the proper number of requests were sent, and then respond to\nthe request with headers and data which causes jQuery to synchronously call a\nspy we set up.</p>\n<p>Cool stuff, but shouldn't there be an easier way to accomplish all of this\nwithout having to keep track of requests? Read on to learn about fake servers\nin Sinon.</p>\n<h2>Fake Servers</h2>\n<p>Fake servers in Sinon are an extension of fake requests which keep track of\nrequests for us so we don't have to! Fake servers work very similarly to fake\nrequests, as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake servers'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Set up a fake server (calls `sinon.useFakeXMLHttpRequest()`)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span>fakeServer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a spy to record server responses.</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Request with jQuery</span>\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">always</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// MAKE SURE YOU CALL `server.respond()`!</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Make assertions, onces again, everything is synchronous.</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>calledOnce<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Restore native functionality.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (basic response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (url, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (url regex, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\/foo\\/bar\\/baz$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url regex, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/\\/foo\\/bar\\/baz$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url, [code, headers, response])'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url regex, [code, headers, response])'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/\\/foo\\/bar\\/baz$/</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we have seven tests which all have the same assertions. For that reason,\nI put the assertions in the <code class=\"language-text\">afterEach</code> hook. The basic flow of using fake\nservers is as such:</p>\n<ul>\n<li><strong>Before Each:</strong> Create a fake server, overriding native functionality.</li>\n<li><strong>Test:</strong> Tell the fake server how to respond to requests with\n<code class=\"language-text\">server.respondWith(...)</code>.</li>\n<li><strong>Test:</strong> Make requests using your favorite method.</li>\n<li><strong>Test:</strong> Tell the fake server to synchronously respond with\n<code class=\"language-text\">server.respond()</code>.</li>\n<li><strong>After Each:</strong> Restore native functionality.</li>\n</ul>\n<p>The reason I have seven tests is to demonstrate all the different ways you can\nhave a server respond to requests by using the different signatures of\n<code class=\"language-text\">server.respondWith(...)</code>. In order, each of the tests do the following:</p>\n<ol>\n<li>Respond to all requests with the same plain text.</li>\n<li>Respond to all requests with a specific url.</li>\n<li>Respond to all requests to an url matching a given regular expression.</li>\n<li>Respond to all <code class=\"language-text\">GET</code> requests to a specific url.</li>\n<li>Respond to all <code class=\"language-text\">GET</code> requests to an url matching a given regular\nexpression.</li>\n<li>Respond to all <code class=\"language-text\">GET</code> requests to a specific url with custom headers.</li>\n<li>Respond to all <code class=\"language-text\">GET</code> requests to an url matching a given regular expression\nwith custom headers.</li>\n</ol>\n<p>As you can see, fake servers are extremely flexible and are capable of\ncompletely decoupling your front-end tests from your back end enabling you to\nnot have to run a server for your tests. This, of course, can be accomplished\nwith regular stubbing, but the fake server approach is often simpler and more\nnatural.</p>\n<h2>JSON-P</h2>\n<p>As of this writing, Sinon doesn't support fake JSON-P requests and it probably\nnever will. The official recommendation is to fall back to stubbing whenever\nyou need to make a JSON-P request. For more information, check out <a href=\"http://sinonjs.org/docs/#json-p\" title=\"Sinon JSON-P Workaround\">the\nofficial documentation</a>.</p>\n<h2>Conclusion</h2>\n<p>By using advanced features provided by <a href=\"http://sinonjs.org/\" title=\"Sinon.JS\">Sinon</a> we are able to simplify\nand even drastically improve the performance of tests which rely on\n<code class=\"language-text\">setTimeout</code>, <code class=\"language-text\">setInterval</code>, and making requests for external resources. To\nlearn more, be sure to check out <a href=\"http://sinonjs.org/docs/\" title=\"Sinon.JS Official Documentation\">Sinon's Official Documentation</a>.</p>","frontmatter":{"date":"January 01, 2014","path":"/blog/advanced-features-in-sinon","tags":"javascript, testing","title":"Advanced Features in Sinon"}}},"pageContext":{"refPath":"/blog/advanced-features-in-sinon","prev":{"frontmatter":{"title":"The Power and Limitations of Partials","path":"/blog/the-power-and-limitations-of-partials"}},"next":{"frontmatter":{"title":"Why You Should Learn JavaScript in 2016","path":"/blog/learn-javascript-2016"}}}}}