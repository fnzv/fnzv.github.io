{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/using-lodash","result":{"data":{"site":{"siteMetadata":{"title":"Ken Powers","siteUrl":"https://knpw.rs"}},"markdownRemark":{"html":"<p><a href=\"http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\" title=\"kik, left-pad, and npm\">So a thing happened recently.</a> I'm sure you've heard of it by\nnow. 11 lines of code were unpublished from npm and all hell broke loose. This\npost isn't going to be about my opinion, everyone else on the Internet seems to\nbe handling that just fine. This also isn't going to be a summary of what\nhappened. The <a href=\"http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\" title=\"kik, left-pad, and npm\">npm blog post</a> does that just fine and gets in to all the details\nI don't feel like writing about (legal stuff... ugh...). This is going to be a\ndiscussion on the context of why this happened and a few ways it can be avoided\nin the future (but I'm not going to talk about preventing unpublishing, others\naround the Internet including the <a href=\"http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\" title=\"kik, left-pad, and npm\">npm blog post</a> already cover that avenue).</p>\n<h2>The origin: micro-libraries and keeping things <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" title=\"Don&#x27;t Repeat Yourself\">DRY</a>.</h2>\n<p>Micro libraries are great. They follow the philosophy of doing one thing and\ndoing it well so we can keep our code <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" title=\"Don&#x27;t Repeat Yourself\">DRY</a> without depending on huge monolithic\nlibraries. Changes, such as bug or compatibility fixes are easily pushed out to\neveryone depending on these micro libraries and everyone is happy. Until one of\nthose micro libraries goes missing.</p>\n<p>Some have suggested that these 11 lines of code were so basic that developers\nshould have implemented them themselves. I disagree with this approach. I don't\nwant my application download size to start bloating because various dependencies\nare all implementing their own functionality when they can all get that\nfunctionality from one place. The next common suggestion is that\nhighly-depended-upon code should be moved in to the standard library. The\nproblem with this idea is that when you are writing JavaScript you typically\naren't just targeting one platform. You are targeting different versions of all\nthe major browser vendors, node, and maybe even Rhino or some other platforms\nthat run JavaScript (I was recently targeting Adobe After Effects which runs\nES3! Party like it's 1999!). History has shown that people are slow to upgrade\n(or they simply <em>can't</em> upgrade) which results in developers polyfilling missing\nfunctionality. And what are they polyfilling with? That's right,\nmicro-libraries!</p>\n<h2>So how do we address this?</h2>\n<p>There are certain things that probably shouldn't be their own module, but that\npath is steering too much towards writing an opinion piece. That said, there is\na very popular library which I would recommend. It's in the title of this post.\nIt's <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a>! As far as my quick glance can tell it is still the most\ndepended-upon module on all of npm (unlikely to be unpublished, and yes <a href=\"http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\" title=\"kik, left-pad, and npm\">npm is\nworking on that</a>), <a href=\"https://codecov.io/github/lodash\" title=\"Lodash Code Coverage\">has great code coverage</a>, and is packed\nfull of well-designed and thought-out utility functions including one which does\nthe same thing that the unpublished code from npm did (<a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> calls it\n<a href=\"https://lodash.com/docs#padStart\" title=\"_.padStart\"><code class=\"language-text\">padStart</code></a> to match the <a href=\"https://github.com/tc39/proposal-string-pad-start-end\" title=\"String.prototype.padStart / String.prototype.padEnd\">proposal</a>).</p>\n<p><strong>Update:</strong> <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> is not only the most depended-upon package on npm, <a href=\"https://gist.github.com/anvaka/8e8fa57c7ee1350e3491#file-01-most-dependent-upon-md\" title=\"Top 1000 most depended-upon packages\">it's\nthe most depended-upon by a large margin.</a></p>\n<h2>But isn't Lodash monolithic?</h2>\n<p>If you use it from a CDN, sure. But that's not the use case we're talking about\nhere. We're talking about something which was unpublished from npm. When you\ninstall <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> from npm there are a few ways you can grab only the functions\nyou use so you don't bloat your build. Let's take a look.</p>\n<h2>Option 1: Import / Require Sub-Modules</h2>\n<p>When you install <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> from npm, you can directly access individual functions\nas sub-modules from the main <code class=\"language-text\">lodash</code> module. For our friend, <a href=\"https://lodash.com/docs#padStart\" title=\"_.padStart\"><code class=\"language-text\">padStart</code></a>, that\nlooks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES2015 import</span>\n<span class=\"token keyword\">import</span> padStart <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/padStart'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CommonJS</span>\n<span class=\"token keyword\">const</span> padStart <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash/padStart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it! No additional setup required. That works for any function in\n<a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a>. Just add a <code class=\"language-text\">/</code> and get the function you need directly. Only the parts\nof <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> you need will be included in your build and nothing else. And as\nlong as other developers depend on the same version of <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> as you do then\nwe get to stay nice and <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" title=\"Don&#x27;t Repeat Yourself\">DRY</a> (more on this later).</p>\n<h2>Option 2: <code class=\"language-text\">babel-plugin-lodash</code></h2>\n<p>Do you use Babel as a part of your build? Oh, who am I kidding? Of course you\ndo! That means you have another option: <a href=\"https://github.com/lodash/babel-plugin-lodash\" title=\"Use Lodash as a monolithic library without worrying about bundling unused parts.\"><code class=\"language-text\">babel-plugin-lodash</code></a>. You simply use\n<code class=\"language-text\">lodash</code> as if it were a giant monolithic library:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then all <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> <code class=\"language-text\">import</code>s (and <code class=\"language-text\">require</code>s) and usages are rewritten to be as\nif you used the first option:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> _padStart <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/padStart'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">_padStart</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also use the partial import syntax from ES2015. This:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  map<span class=\"token punctuation\">,</span>\n  reject<span class=\"token punctuation\">,</span>\n  take<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Becomes this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> _map <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/map'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> _reject <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/reject'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> _take <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/take'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">_take</span><span class=\"token punctuation\">(</span><span class=\"token function\">_reject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It'll even work if you rename your imports, as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  map <span class=\"token keyword\">as</span> ldMap<span class=\"token punctuation\">,</span>\n  reject <span class=\"token keyword\">as</span> ldReject<span class=\"token punctuation\">,</span>\n  take <span class=\"token keyword\">as</span> ldTake<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">ldMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ldTake</span><span class=\"token punctuation\">(</span><span class=\"token function\">ldReject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Option 3: <a href=\"https://www.npmjs.com/package/lodash-es\" title=\"Lodash Exported as ES Modules\"><code class=\"language-text\">lodash-es</code></a> and <a href=\"http://www.2ality.com/2015/12/webpack-tree-shaking.html\" title=\"Tree-shaking with webpack 2 and Babel 6\">Tree Shaking</a></h2>\n<p>That first option has been around for a while. The second option is newer and\ndoesn't require you to be as explicit, but configuring your build around a\nspecific library may not appeal to everyone. There is an even newer technique\nthat will probably be all the rage any day now: <a href=\"http://www.2ality.com/2015/12/webpack-tree-shaking.html\" title=\"Tree-shaking with webpack 2 and Babel 6\">tree shaking</a> for ES2015. There\nare two module bundlers I can think of off the top of my head that support it\nout of the box: <a href=\"http://webpack.github.io/\" title=\"webpack module bundler\">webpack 2</a> and <a href=\"http://rollupjs.org/\" title=\"Next-generation ES6 module bundler\">Rollup</a>. <a href=\"http://www.2ality.com/2015/12/webpack-tree-shaking.html\" title=\"Tree-shaking with webpack 2 and Babel 6\">Tree shaking</a> is still a\nwork in progress and I haven't yet gotten good results trying to shake the tree\nthat is <a href=\"https://www.npmjs.com/package/lodash-es\" title=\"Lodash Exported as ES Modules\"><code class=\"language-text\">lodash-es</code></a> (compare ~100KB to ~4KB for using <code class=\"language-text\">_.padStart</code> in a\nproject). See <a href=\"https://github.com/webpack/webpack/issues/1750\" title=\"Tree Shaking Results for webpack\">this webpack issue</a> and <a href=\"https://github.com/rollup/rollup/issues/45#issuecomment-151160765\" title=\"Tree Shaking Results for Rollup\">this rollup issue\ncomment</a> for more details.</p>\n<h2>Bonus: this all works with <a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\" title=\"lodash/fp\"><code class=\"language-text\">lodash/fp</code></a>!</h2>\n<p><a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\" title=\"lodash/fp\"><code class=\"language-text\">lodash/fp</code></a> just rewrites the signatures of regular <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> functions but\nstill uses the underlying code of the original functions so you are still\nkeeping things DRY if other developers aren't using <a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\" title=\"lodash/fp\"><code class=\"language-text\">lodash/fp</code></a>. It's\nessentially just a wrapper for <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> functions to make them more functional.</p>\n<h2>The downside: this breaks shortcut fusion.</h2>\n<p>Huh? To quote the <a href=\"https://lodash.com/docs#_\" title=\"Lodash Shortcut Fusion\">Lodash documentation</a>:</p>\n<blockquote>\n<p>Lazy evaluation allows several methods to support shortcut fusion. Shortcut\nfusion is an optimization to merge iteratee calls; this avoids the creation of\nintermediate arrays and can greatly reduce the number of iteratee executions.</p>\n</blockquote>\n<p>Of course, if you're migrating from micro-libraries such as <code class=\"language-text\">left-pad</code> then this\nshouldn't really concern you anyway because you didn't have shortcut fusion to\nbegin with. It's just worth noting that <a href=\"https://github.com/lodash/lodash/issues/1426\" title=\"Cherry-Picking and Shortcut Fusion\">if you pick and choose Lodash functions\nindividually you won't be able to use shortcut fusion</a>.</p>\n<h2>Some advice: use semantic versioning!</h2>\n<p>When you are depending on <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> do not depend on an exact version. The\n<a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> maintainers are very good about following semantic versioning which\nmeans breaking changes will only be introduced in major releases. As of this\nwriting, that means you should depend on version <code class=\"language-text\">^4</code> of <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> (or if you run\n<code class=\"language-text\">npm i -S lodash</code> then whatever it puts in your <code class=\"language-text\">package.json</code> is fine, as long\nas it starts with <code class=\"language-text\">^</code>).</p>\n<h2>Staying up to date.</h2>\n<p>So what happens when <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> releases version 5? Fragmentation, that's what!\nSuddenly we're no longer <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" title=\"Don&#x27;t Repeat Yourself\">DRY</a> as some libraries will depend on <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> <code class=\"language-text\">^4</code>\nand others will depend on <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> <code class=\"language-text\">^5</code>. That's where <a href=\"https://greenkeeper.io/\" title=\"Greenkeeper: Your software, up-to-date, all the time.\">Greenkeeper</a> comes in.\n<a href=\"https://greenkeeper.io/\" title=\"Greenkeeper: Your software, up-to-date, all the time.\">Greenkeeper</a> will watch your dependencies and automatically send you pull\nrequests when a new version of something is published that isn't covered by the\nversion ranges in your <code class=\"language-text\">package.json</code>. If your CI passes then you're good to\nmerge (but feel free to run whatever additional checks you want to). I recommend\nthat all open source JavaScript library authors use <a href=\"https://greenkeeper.io/\" title=\"Greenkeeper: Your software, up-to-date, all the time.\">Greenkeeper</a> as it is\nfree for open source projects and it'll help you stay up to date.</p>\n<h2>Conclusion</h2>\n<p>Nothing I wrote about in this post is necessarily new or revolutionary, but\ngiven what I am dubbing <em><a href=\"http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\" title=\"kik, left-pad, and npm\">The Great NPM Fiasco of 2016</a></em> I felt\nit was worth discussing in context. I would personally advise that at a minimum,\nif you are depending on a micro-library such as <code class=\"language-text\">pad-left</code>, or something\nsimilar, you should instead depend on <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> and then use <code class=\"language-text\">lodash/padStart</code>,\nor whatever the equivalent <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> functions are for whatever you need in your\nproject. Whatever you do, don't just copy and paste code or re-implement basic\nfunctionality in every project. <a href=\"https://lodash.com/\" title=\"Lodash: A modern JavaScript utility library delivering modularity, performance, &#x26; extras.\">Lodash</a> functions are well-tested (<a href=\"https://travis-ci.org/lodash/\" title=\"Lodash CI\">1</a>,\n<a href=\"https://saucelabs.com/u/lodash\" title=\"Lodash Cross-Browser Tests\">2</a>, <a href=\"https://codecov.io/github/lodash\" title=\"Lodash Code Coverage\">3</a>) and will help you keep everything very <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" title=\"Don&#x27;t Repeat Yourself\">DRY</a>. Small side\nbenefit: your <code class=\"language-text\">package.json</code> will shrink since you only need to depend on one\nlibrary instead of many.</p>","frontmatter":{"date":"March 24, 2016","path":"/blog/using-lodash","tags":"javascript","title":"Using Lodash as a Collection of Micro-Libraries"}}},"pageContext":{"refPath":"/blog/using-lodash","prev":{"frontmatter":{"title":"Why You Should Learn JavaScript in 2016","path":"/blog/learn-javascript-2016"}},"next":{"frontmatter":{"title":"Trying Out Node Modules","path":"/blog/trying-node-modules"}}}}}