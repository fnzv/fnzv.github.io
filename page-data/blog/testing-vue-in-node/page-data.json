{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/testing-vue-in-node","result":{"data":{"site":{"siteMetadata":{"title":"sami.pw","siteUrl":"https://sami.pw"}},"markdownRemark":{"html":"<p><a href=\"https://vuejs.org/\" title=\"Vue.js\">Vue</a> is a progressive framework for building user interfaces in JavaScript,\nHTML, and CSS. One of its most unique features is that it allows you to combine\nthe JavaScript (logic), HTML (template), and CSS (style) for a single component\ninto a <a href=\"https://vuejs.org/v2/guide/single-file-components.html\" title=\"Single File Components\">single <code class=\"language-text\">.vue</code> file</a>.</p>\n<p>One of the benefits of writing universal JavaScript is that you can test all of\nyour code, front-end and back-end, together in node without having to spin up\nbrowser processes. Unfortunately, <code class=\"language-text\">.vue</code> files don't quite fit this pattern.\nUntil now.</p>\n<p>I just published version <code class=\"language-text\">1.0.0</code> of <a href=\"https://github.com/knpwrs/vue-node\" title=\"vue-node: A require hook for loading single-file vue components in node.\"><code class=\"language-text\">vue-node</code></a>, a require hook for loading\nsingle-file vue components in node. What follows is an example of how to use\n<a href=\"https://github.com/knpwrs/vue-node\" title=\"vue-node: A require hook for loading single-file vue components in node.\"><code class=\"language-text\">vue-node</code></a> with <a href=\"https://github.com/avajs/ava\" title=\"AVA: Futuristic Test Runner\">AVA</a>, a popular node testing framework.</p>\n<h2>Let's do this!</h2>\n<p>First, make sure you have <a href=\"https://github.com/knpwrs/vue-node\" title=\"vue-node: A require hook for loading single-file vue components in node.\"><code class=\"language-text\">vue-node</code></a> and <a href=\"https://github.com/lukechilds/browser-env\"><code class=\"language-text\">browser-env</code></a> installed as\ndevelopment dependencies. If you are running an environment with <code class=\"language-text\">vue-loader</code>\nand <code class=\"language-text\">webpack@2</code> then you will already have all required peer dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm i -D vue-node browser-env</code></pre></div>\n<p>Now create a setup file called <code class=\"language-text\">test/helpers/setup.js</code>. Putting it in the\n<code class=\"language-text\">test/helpers</code> directory will let <a href=\"https://github.com/avajs/ava\" title=\"AVA: Futuristic Test Runner\">AVA</a> know that this file is not a test.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> browserEnv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'browser-env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-node'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Setup a fake browser environment</span>\n<span class=\"token function\">browserEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Pass an absolute path to your webpack configuration to the hook function.</span>\n<span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'webpack.config.test.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you can configure AVA to require this file in all test processes. In\n<code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ava\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"./test/helpers/setup.js\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you can <code class=\"language-text\">require</code> / <code class=\"language-text\">import</code> <code class=\"language-text\">.vue</code> files and test like you would in a\nbrowser! If you need to test DOM updates, I recommend using the <a href=\"https://github.com/sindresorhus/p-immediate\" title=\"Returns a promise resolved in the next event loop\"><code class=\"language-text\">p-immediate</code></a>\npackage from npm along with <code class=\"language-text\">async</code> / <code class=\"language-text\">await</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'ava'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> nextTick <span class=\"token keyword\">from</span> <span class=\"token string\">'p-immediate'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TestComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./test.vue'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders the correct message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> Constructor <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>TestComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Update</span>\n  vm<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, Foo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are more examples in the <a href=\"https://github.com/knpwrs/vue-node/tree/master/test\"><code class=\"language-text\">test</code> directory</a> of <a href=\"https://github.com/knpwrs/vue-node\" title=\"vue-node: A require hook for loading single-file vue components in node.\"><code class=\"language-text\">vue-node</code></a>.</p>\n<h2>How does this work?</h2>\n<p>Node allows developers to hook <code class=\"language-text\">require</code> to load files that aren't JavaScript or\nJSON. Unfortunately, require hooks have to be synchronous. Using <code class=\"language-text\">vue-loader</code> on\nthe other hand, is inherently asynchronous. <a href=\"https://github.com/knpwrs/vue-node\" title=\"vue-node: A require hook for loading single-file vue components in node.\"><code class=\"language-text\">vue-node</code></a> works by synchronously\nrunning webpack in a separate process and collecting the output to pass to\nnode's module compilation system. The compilation is done completely in memory\nwithout writing to the filesystem. It also modifies your webpack configuration\nto automatically build for node and commonjs with all dependencies of your\ncomponent externalized. This means that the built component modules are as small\nas possible with dependency resolution left up to node.</p>\n<h2>Why not just test in browsers using Karma?</h2>\n<p>Unit testing in web browsers is a very heavy process with many tradeoffs.\nConfiguration and tooling is tricky as is getting browsers to run in CI. I\npersonally like saving browsers for end-to-end testing with things like\n<a href=\"http://nightwatchjs.org/\" title=\"Node.js powered End-to-End testing framework\"><code class=\"language-text\">Nightwatch.js</code></a>.</p>\n<h2>What if I use vueify?</h2>\n<p>I am personally more familiar with webpack than browserify, so for the time\nbeing this will only work in combination with webpack. I will gladly accept a\npull request to implement browserify functionality.</p>\n<h2>Don't <code class=\"language-text\">.vue</code> files violate the principle of separation of concerns?</h2>\n<p>No. For the same reason React doesn't violate that very same principle for\nputting angle brackets in your JavaScript. Separation of technologies is often\nconfused with separation of concerns. Far from separating your concerns, using\nseparate files just spreads out your concerns and makes them hard to manage.</p>\n<h2>What now?</h2>\n<p>Use <a href=\"https://github.com/knpwrs/vue-node\" title=\"vue-node: A require hook for loading single-file vue components in node.\"><code class=\"language-text\">vue-node</code></a> in your projects and submit issues and pull requests. I would\nlove to see the <a href=\"https://vuejs.org/\" title=\"Vue.js\">Vue</a> community embrace headless testing in node just like the\nReact community has. Feel free to leave any questions or feedback in the\ncomments section below.</p>","frontmatter":{"date":"February 11, 2017","path":"/blog/testing-vue-in-node","tags":"vue, testing","title":"Testing Single-File Vue Components in Node"}}},"pageContext":{"refPath":"/blog/testing-vue-in-node","prev":false,"next":{"frontmatter":{"title":"Creating and Scaling a Docker Swarm Cluster with Terraform","path":"/blog/docker-swarm-terraform"}}}}}