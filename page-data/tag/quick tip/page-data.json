{"componentChunkName":"component---src-templates-tags-jsx","path":"/tag/quick tip","result":{"data":{"site":{"siteMetadata":{"title":"Ken Powers"}}},"pageContext":{"posts":[{"html":"<p>On my personal laptop I often write code for multiple organizations as well as\nmy own personal projects. Being the git neat freak I am sometimes I prefer to\nuse different user configurations in git depending on what project I'm working\non (e.g., personal projects might use my email address here at <code class=\"language-text\">knpw.rs</code>\nwhereas non-personal projects might use a different email address).  The\nsolution for a small number of projects is simple: just use <code class=\"language-text\">git config</code> to set\nlocal user configuration for a given repo. However, that breaks down very\neasily. For instance, sometimes I would clone down a repo just to make a quick\nchange and I would forget to set local user configuration. A quick Google\nsearch revealed that <a href=\"http://stackoverflow.com/questions/4220416/can-i-specify-multiple-users-for-myself-in-gitconfig\" title=\"Stack Overflow: Can I specify multiple users for myself in .gitconfig?\">I'm not alone</a>. What follows is my\nsolution to make using multiple users in git easy and convenient.</p>\n<h2>Authorship With Environment Variables</h2>\n<p>A look around the <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables#Committing\" title=\"Git Internals: Environment Variables\">git docs</a> shows that you can set the name and email for a\ncommit through environment variables. For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ export GIT_AUTHOR_NAME=&quot;Foo Barrington&quot;\n$ export GIT_AUTHOR_EMAIL=&quot;bears@banana.dev&quot;\n$ git commit -am &quot;Foo&quot;\n[master b51714c] Foo\n Author: Foo Barrington &lt;bears@banana.dev&gt;\n 1 file changed, 21 insertions(+)</code></pre></div>\n<p><code class=\"language-text\">GIT_AUTHOR_NAME</code> and <code class=\"language-text\">GIT_AUTHOR_EMAIL</code> are now set for that shell session.\nAll commits until the shell exits  will use the name <code class=\"language-text\">Foo Barrington</code> and the\nemail <code class=\"language-text\">bears@banana.dev</code> for their user configuration. What we need is a way to\nmake sure we always have these variables set for a given set of projects.</p>\n<h2>Introducing <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a></h2>\n<p><a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> describes itself as an environment switcher for the shell. If you've\never used tools like <a href=\"http://rmv.io/\" title=\"rvm\"><code class=\"language-text\">rvm</code></a> then you're already familiar with the concept.\nEssentially it lets you change your environment variables depending on what\nyour current working directory is. Unlike <a href=\"http://rmv.io/\" title=\"rvm\"><code class=\"language-text\">rvm</code></a>, it's just a small, static\nbinary with no external dependencies and it is language-agnostic.</p>\n<h3>Part One: Installation and Setup</h3>\n<p>On macOS installation is simple enough with <a href=\"http://brew.sh/\" title=\"Homebrew\">Homebrew</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ brew install direnv</code></pre></div>\n<p>Installation for other platforms (or from source) is covered on the <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a>\nwebsite.</p>\n<p>You will also need to set it up to hook in to your shell. For <code class=\"language-text\">zsh</code>, I have the\nfollowing in my <code class=\"language-text\">.zshrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># Load direnv\nif hash direnv 2&gt;/dev/null; then\n  eval &quot;$(direnv hook zsh)&quot;\nfi</code></pre></div>\n<p>Because I use <a href=\"https://github.com/knpwrs/dotfiles\">my dotfiles</a> on multiple machines I check to make sure\n<a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> is installed before attempting to hook it into the shell.\nDocumentation for other shells is available on the <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> website, though\nit's very similar.</p>\n<p>Now that you have <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> setup you can create <code class=\"language-text\">.envrc</code> files that export\nvariables. For our purposes we can create a <code class=\"language-text\">.envrc</code> file with the following\ncontents:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">export GIT_AUTHOR_NAME=&quot;Foo Barrington&quot;\nexport GIT_AUTHOR_EMAIL=&quot;bears@banana.dev&quot;\nexport GIT_COMMITTER_NAME=&quot;Foo Barrington&quot;\nexport GIT_COMMITTER_EMAIL=&quot;bears@banana.dev&quot;</code></pre></div>\n<p>Now whenever we change in to this directory, <em>or any directory underneath this\ndirectory</em>, those environment variables will be set. Note that the first time\nyou encounter any given <code class=\"language-text\">.envrc</code> file <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> will ask you to whitelist the\nfile.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">direnv: error .envrc is blocked. Run `direnv allow` to approve its content.</code></pre></div>\n<p>This is a security feature. Essentially since <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> is just executing\narbitrary code it wants to make sure that you are aware of what is going on in\nyour shell. That way if you clone down a project that contains a <code class=\"language-text\">.envrc</code> file\nyou won't just be blindly executing code whenever you enter the project.</p>\n<p>Also note that when you enter a directory that contains a <code class=\"language-text\">.envrc</code> file (or a\nsub-directory as previously noted) you will get a little notice indicating that\nyou have new variables in your shell:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">direnv: loading .envrc\ndirenv: export +GIT_AUTHOR_EMAIL +GIT_AUTHOR_NAME +GIT_COMMITTER_EMAIL +GIT_COMMITTER_NAME</code></pre></div>\n<p>Let's whitelist that <code class=\"language-text\">.envrc</code> file, initialize a new git repository, and make\nan initial commit:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ direnv allow\ndirenv: loading .envrc\ndirenv: export +GIT_AUTHOR_EMAIL +GIT_AUTHOR_NAME +GIT_COMMITTER_EMAIL +GIT_COMMITTER_NAME\n$ git init foo\nInitialized empty Git repository in /Users/kpowers/Workspace/tmp/foo/.git/\n$ cd foo\n$ echo &quot;# foo&quot; &gt; README.md\n$ git add README.md\n$ git commit -m &quot;Initial commit.&quot;\n[master (root-commit) 9a31ade] Initial commit.\n Author: Foo Barrington &lt;bears@banana.dev&gt;\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md</code></pre></div>\n<p>Looks like we're in business!</p>\n<h3>Part Two: Workspace Structure</h3>\n<p>The a-ha moment is that the <code class=\"language-text\">.envrc</code> file cascades to deeper directories. The\ntrick to get this working the way we want relies on structuring your workspace\nin a certain way. In my home directory I have a workspace directory that looks\nlike the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">workspace\n├── git.my.org\n│   ├── .envrc       # User configuration when I&#39;m working on my.org.\n│   └── team\n│       ├── proj1\n│       ├── proj2\n│       └── proj3\n└── github.com\n    └── knpwrs\n        ├── .envrc   # User configuration when I&#39;m working on my personal projects.\n        ├── proj1\n        ├── proj2\n        └── proj3</code></pre></div>\n<p>Essentially I can set user configuration on a per-subtree basis rather than\na per-repo basis. It doesn't matter where in the tree the <code class=\"language-text\">.envrc</code> files are\nlocated, as long as relevant projects are kept at the same level or lower in\nthe directory tree.</p>\n<h2>For the Gophers</h2>\n<p>If you are a Go developer you might already be <a href=\"http://tammersaleh.com/posts/manage-your-gopath-with-direnv/\" title=\"Manage Your GOPATH with direnv\">using direnv to manage your\n<code class=\"language-text\">GOPATH</code></a>. To implement what I am writing about here you would have a\n<code class=\"language-text\">.envrc</code> in the root of your workspace for <code class=\"language-text\">GOPATH</code> (and probably <code class=\"language-text\">PATH</code>, for\nthat matter) and then you may want individual <code class=\"language-text\">.envrc</code> files for packages or\norganizations:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── .envrc               # Go workspace configuration (GOPATH, etc).\n├── bin\n├── pkg\n└── src\n    └── github.com\n        ├── knpwrs\n        │   ├── .envrc   # Git user configuration for knpwrs.\n        │   └── proj1\n        ├── mattn\n        └── nsf</code></pre></div>\n<p>But there's a problem! By default <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> will only use the closest <code class=\"language-text\">.envrc</code>\nfile. What we want is to combine the root <code class=\"language-text\">.envrc</code> with the project or\norganization <code class=\"language-text\">.envrc</code> so we can have our <code class=\"language-text\">GOPATH</code> and <code class=\"language-text\">PATH</code> correct but still\nhave granual authorship configuration. Fortunately, <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> has a mechanism\nfor this:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">source_up\nexport GIT_AUTHOR_NAME=&quot;Foo Barrington&quot;\nexport GIT_AUTHOR_EMAIL=&quot;bears@banana.dev&quot;</code></pre></div>\n<p><code class=\"language-text\">source_up</code> is a command in <a href=\"http://direnv.net/#man/direnv-stdlib.1\" title=\"direnv-stdlib.1\"><code class=\"language-text\">direnv-stdlib</code></a> which looks for <code class=\"language-text\">.envrc</code> files in\nparent directories. Now whenever I am working inside of <code class=\"language-text\">src/github.com/knwprs</code>\nI will be known as <code class=\"language-text\">Foo Barrington &lt;bears@banana.dev&gt;</code> and my <code class=\"language-text\">GOPATH</code> and\n<code class=\"language-text\">PATH</code> variables will be properly set up. Sweet!</p>\n<h2>My Original (Failed) Idea</h2>\n<p>I thought that <code class=\"language-text\">.gitconfig</code> might be able to cascade much like <code class=\"language-text\">.gitignore</code>\ndoes inside a repo (or rather, I was hoping it would scan up through the\ndirectory tree and apply settings from any <code class=\"language-text\">.gitconfig</code> files it finds, much\nlike <code class=\"language-text\">source_up</code> in <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a>).  Essentially instead of creating <code class=\"language-text\">.envrc</code>\nfiles I would create <code class=\"language-text\">.gitconfig</code> files. Unfortunately git doesn't work this\nway. It checks for config in three places: <code class=\"language-text\">.git/config</code>, <code class=\"language-text\">~/.gitconfig</code>, and\n<code class=\"language-text\">$(prefix)/etc/gitconfig</code>. For more information, see <a href=\"https://git-scm.com/docs/git-config\" title=\"git-config\"><code class=\"language-text\">git-config</code></a>.</p>\n<h2>Conclusion</h2>\n<p>The problem may seem a little convoluted at first (I was internally debating\nwhether or not to even write this) but the existence of that <a href=\"http://stackoverflow.com/questions/4220416/can-i-specify-multiple-users-for-myself-in-gitconfig\" title=\"Stack Overflow: Can I specify multiple users for myself in .gitconfig?\">Stack Overflow</a>\nthread shows that I'm not alone in my desire for easily switching user\nconfiguration in git. Unfortunately my original idea of just using <code class=\"language-text\">.gitconfig</code>\nfiles didn't work and so I had to introduce an external tool to solve the\nproblem. That said, <a href=\"http://direnv.net/\" title=\"direnv\"><code class=\"language-text\">direnv</code></a> is very useful on its own outside of this\ncontext anyway (like for <code class=\"language-text\">GOPATH</code>), so I'm happy to have it installed.</p>","id":"c0c0a9c4-5f5f-5ab4-a78e-c8a57ae4b964","timeToRead":6,"frontmatter":{"date":"September 01, 2016","path":"/blog/multiple-git-users","tags":"git, quick tip","title":"Quick Tip: Multiple User Configs with Git"}}],"tag":"quick tip","pagesSum":1,"page":1}}}