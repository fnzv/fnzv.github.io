{"componentChunkName":"component---src-templates-tags-jsx","path":"/tag/devops","result":{"data":{"site":{"siteMetadata":{"title":"sami.pw"}}},"pageContext":{"posts":[{"html":"<p><a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is a tool made by <a href=\"https://www.hashicorp.com/\" title=\"Hashicorp\">Hashicorp</a> which allows you to provision and\nmanage infrastructure on popular cloud providers. You define your infrastructure\nas code in simple configuration files enabling repeatable deployments which are\nsimple to tear down and easy to make changes to. This article serves as an\nintroduction to <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> by showing you how to create and scale a <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker\nSwarm</a> cluster on <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a>. If you don't already have a <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a>\naccount and would like to follow along you can use <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">this link</a> to\nget $10 in free credit.</p>\n<h2>Preparing <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a></h2>\n<p>Before getting started, you will need to generate an API token so <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a>\ncan access your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account. To generate an API token all you need to\ndo is log in to your account, click \"API\" in the top navigation bar, and then\nclick \"Generate New Token.\" Give the token a name and make sure you enable read\nand write access. Copy down the API token and keep it somewhere safe --\n<a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> will not show you the token again. If you lose the token you will\nhave to generate a new one.</p>\n<h2>Generate a Public/Private Key-Pair</h2>\n<p>Use the following command to generate a public and private key-pair:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">ssh-keygen -o -a 100 -t ed25519 -C dockerswarm@digitalocean</code></pre></div>\n<p>By default this will create two files: <code class=\"language-text\">~/.ssh/id_ed25519</code> and\n<code class=\"language-text\">~/.ssh/id_ed25519.pub</code>. When the command runs you will have an opportunity to\nuse a different location if you want. Make sure you use a strong passphrase when\ngenerating the key. Once the keys are generated use the following command to add\nthe private key to your SSH agent:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">ssh-add ~/.ssh/id_ed25519</code></pre></div>\n<h2>First Steps With <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a></h2>\n<p>First you have to <a href=\"https://www.terraform.io/intro/getting-started/install.html\" title=\"Install Terraform\">install Terraform</a>. If you are on macOS with\n<a href=\"https://brew.sh/\" title=\"Homebrew Package Manager\">Homebrew</a> installed this is as simple as running <code class=\"language-text\">brew install terraform</code>.\nOtherwise simply follow the <a href=\"https://www.terraform.io/intro/getting-started/install.html\" title=\"Install Terraform\">installation instructions</a> for your\nplatform.</p>\n<p>Once installed you can begin writing your configuration files. In an empty\ndirectory make a file called <code class=\"language-text\">variables.tf</code> with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variable &quot;do_token&quot; {\n  description = &quot;Your Digital Ocean API token&quot;\n}\n\nvariable &quot;public_key_path&quot; {\n  description = &quot;Path to the SSH public key to be used for authentication&quot;\n}\n\nvariable &quot;do_key_name&quot; {\n  description = &quot;Name of the key on Digital Ocean&quot;\n  default = &quot;terraform&quot;\n}</code></pre></div>\n<p>This file defines <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a> you can use throughout your <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a>\nconfiguration. The <code class=\"language-text\">do_key_name</code> variable has a default value so you don't have\nto explicitly initialize it with another value. When you run the <code class=\"language-text\">terraform</code>\ncommand it will ask you for values to use for the other <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a>. If you\ndon't want to enter values every time you run <code class=\"language-text\">terraform</code> (I know I don't!) then\nyou can create a file called <code class=\"language-text\">terraform.tfvars</code> which defines values for\n<a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">do_token=&quot;DIGITALOCEAN API TOKEN&quot;\npublic_key_path=&quot;~/.ssh/id_ed25519.pub&quot;</code></pre></div>\n<p>Now create a file called <code class=\"language-text\">main.tf</code> with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">provider &quot;digitalocean&quot; {\n  token = &quot;${var.do_token}&quot;\n}\n\nresource &quot;digitalocean_ssh_key&quot; &quot;default&quot; {\n  name = &quot;${var.do_key_name}&quot;\n  public_key = &quot;${file(var.public_key_path)}&quot;\n}</code></pre></div>\n<p>The first block defines credentials to use for the <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> provider. The\nsecond block defines a resource for <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> to create and manage. In this\ncase we are adding a public key to our <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account. The <code class=\"language-text\">resource</code>\nblock is defined with <code class=\"language-text\">TYPE</code> and <code class=\"language-text\">NAME</code> parameters. Configuration for the\nresource goes inside the curly braces. The difference between the <code class=\"language-text\">NAME</code>\nparameter and the <code class=\"language-text\">name</code> configuration is that <code class=\"language-text\">NAME</code> is only used within\n<a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> (in our case, to refer to the resource) whereas <code class=\"language-text\">name</code> is a\nconfiguration parameter for the resource (in this case, <code class=\"language-text\">name</code> will define how\nthe key is displayed in your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account). The <code class=\"language-text\">${}</code> syntax is how\n<a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> does <a href=\"https://en.wikipedia.org/wiki/String_interpolation\" title=\"String Interpolation\">string interpolation</a>. Here, we are referencing the\n<a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a> we defined and using them as strings in our provider and resource\nconfiguration.</p>\n<p>At this point you should have three files: <code class=\"language-text\">variables.tf</code>, <code class=\"language-text\">main.tf</code>, and\n<code class=\"language-text\">terraform.tfvars</code>. Run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">terraform plan</code></pre></div>\n<p>Assuming you did everything properly <code class=\"language-text\">terraform</code> will report that it will add a\npublic key to your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account when the plan is applied. To apply the\nplan, just run:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">terraform apply</code></pre></div>\n<p>You should see a message that says, <code class=\"language-text\">Apply complete! Resources: 1 added, 0\nchanged, 0 destroyed.</code> Now if you run <code class=\"language-text\">terraform plan</code> again you will see a\nmessage which says, <code class=\"language-text\">No changes. Infrastructure is up-to-date.</code> This is an\nimportant concept in understanding the power of a tool like <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a>. To make\nchanges to your infrastructure you just need to update the configuration files\nand run <code class=\"language-text\">terraform apply</code>. <code class=\"language-text\">terraform</code> will only perform the changes required to\nmake your infrastructure match the new configuration. You don't have to run\n<code class=\"language-text\">terraform plan</code>, but it's a good idea to always look at the plan before\napplying changes, even if your changes seem benign.</p>\n<p>Note: the names of your <code class=\"language-text\">.tf</code> files doesn't actually matter. When you use the\n<code class=\"language-text\">terraform</code> command it will load all files in the current directory with the\n<code class=\"language-text\">.tf</code> extension. As you will see shortly, this works because the order you\ndeclare resources in <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> doesn't matter. If you really wanted to you\ncould put everything in any order in one <code class=\"language-text\">.tf</code> file. This only applies to <code class=\"language-text\">.tf</code>\nfiles, your variable values must be defined in <code class=\"language-text\">terraform.tfvars</code>.</p>\n<h2>Setting up the <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> Manager</h2>\n<p>Adding a public key to your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account is cool and all, but it's not\nterribly exciting. Let's set up a machine to act as the Docker Swarm manager\nnode. Add the following to <code class=\"language-text\">main.tf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;digitalocean_droplet&quot; &quot;docker_swarm_manager&quot; {\n  name = &quot;docker-swarm-manager&quot;\n  region = &quot;nyc3&quot;\n  size = &quot;512mb&quot;\n  image = &quot;ubuntu-16-04-x64&quot;\n  ssh_keys = [&quot;${digitalocean_ssh_key.default.id}&quot;]\n  private_networking = true\n\n  provisioner &quot;remote-exec&quot; {\n    script = &quot;install-docker.sh&quot;\n  }\n\n  provisioner &quot;remote-exec&quot; {\n    inline = [\n      &quot;docker swarm init --advertise-addr ${digitalocean_droplet.docker_swarm_manager.ipv4_address_private}&quot;\n    ]\n  }\n}</code></pre></div>\n<p>This block defines a droplet (virtual machine) to create on <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a>. Most\nof the parameters are self-explanatory though there are a few things to call\nout. First, the configuration for <code class=\"language-text\">ssh_keys</code>. You can directly use the id or\nfingerprint of a public key in your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account; however, since we\ncreated a <code class=\"language-text\">digitalocean_ssh_key</code> resource with <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> we can directly\nreference it here without having to look it up. The <code class=\"language-text\">ssh_keys</code> configuration\ntakes a list of strings as a value. Here, we are interpolating the id attribute\nof the key into a string. The syntax for referencing an attribute from a\nresource is <code class=\"language-text\">TYPE.NAME.ATTR</code>, hence <code class=\"language-text\">digitalocean_ssh_key.default.id</code>.</p>\n<p>The configuration block also contains two provisioners. One copies a script,\n<code class=\"language-text\">install-docker.sh</code> to the machine and runs it. The contents of\n<code class=\"language-text\">install-docker.sh</code> are:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/usr/bin/env bash\nsudo apt-get update\nsudo apt-get upgrade -y\nsudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\nsudo apt-add-repository &#39;deb https://apt.dockerproject.org/repo ubuntu-xenial main&#39;\nsudo apt-get update\napt-cache policy docker-engine\nsudo apt-get install -y docker-engine</code></pre></div>\n<p>You should also make sure the file is executable:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">chmod +x install-docker.sh</code></pre></div>\n<p>The steps executed by this script are covered on <a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/\" title=\"Get Docker for Ubuntu\">Docker's Official\nWebsite</a>.</p>\n<p>The second provisioner runs a command on the machine. We use <a href=\"https://en.wikipedia.org/wiki/String_interpolation\" title=\"String Interpolation\">string\ninterpolation</a> to set the IP address the swarm manager listens on. Once again,\nwe use the <code class=\"language-text\">TYPE.NAME.ATTR</code> syntax, this time to get the private IP address of\nthe machine.</p>\n<p>To get a list of <code class=\"language-text\">region</code>s, <code class=\"language-text\">size</code>s, and <code class=\"language-text\">image</code>s available to use you can use\nthe <a href=\"https://developers.digitalocean.com/documentation/v2/\" title=\"DigitalOcean API\">DigitalOcean API</a>. It's also worth noting that for the <code class=\"language-text\">image</code> we could\nhave used <code class=\"language-text\">docker-16-04</code> instead of <code class=\"language-text\">ubuntu-16-04-x64</code>. I used the Ubuntu base\nimage because I prefer to install my own software rather than start with\npre-configured images. This also lets us demonstrate using a provisioner to\ninstall software on the remote machine.</p>\n<p>Run <code class=\"language-text\">terraform plan</code>. You will see that the plan calls for one machine to be\ncreated. Run <code class=\"language-text\">terraform apply</code> and the machine will be created and provisioned\nwith <a href=\"https://www.docker.com/\" title=\"Docker\">Docker</a> installed.</p>\n<h2>Adding Worker Nodes</h2>\n<p>Now that we understand <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> a little more we can start going a little\nfaster. Add the following to <code class=\"language-text\">main.tf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;digitalocean_droplet&quot; &quot;docker_swarm_worker&quot; {\n  count = 3\n  name = &quot;docker-swarm-worker-${count.index}&quot;\n  region = &quot;nyc3&quot;\n  size = &quot;512mb&quot;\n  image = &quot;ubuntu-16-04-x64&quot;\n  ssh_keys = [&quot;${digitalocean_ssh_key.default.id}&quot;]\n  private_networking = true\n\n  provisioner &quot;remote-exec&quot; {\n    script = &quot;install-docker.sh&quot;\n  }\n\n  provisioner &quot;remote-exec&quot; {\n    inline = [\n      &quot;docker swarm join --token ${data.external.swarm_join_token.result.worker} ${digitalocean_droplet.docker_swarm_manager.ipv4_address_private}:2377&quot;\n    ]\n  }\n}</code></pre></div>\n<p>This is very similar to the last resource block. We're even reusing the same\n<code class=\"language-text\">install-docker.sh</code> script from the manager resource block. The first key\ndifference is that we supply a <code class=\"language-text\">count</code> configuration and set the value to <code class=\"language-text\">3</code>.\nThis tells <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> that we want three of this resource. We name the\nresources accordingly by interpolating the index of each resource into the name\nof the resource.</p>\n<p>The second key difference is that instead of initializing a swarm manager node\nwe have this machine join the swarm as a worker node. In order to do that we\nneed to retrieve the worker join token from the manager node as well as the IP\naddress of the manager node. We already know how to get the manager node IP\naddress -- the same exact way we got it before when we set up the node's\nlistening address. To get the worker join token we can define an external data\nsource. Add the following to <code class=\"language-text\">main.tf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data &quot;external&quot; &quot;swarm_join_token&quot; {\n  program = [&quot;./get-join-tokens.sh&quot;]\n  query = {\n    host = &quot;${digitalocean_droplet.docker_swarm_manager.ipv4_address}&quot;\n  }\n}</code></pre></div>\n<p>We reference the data provided from this block via <code class=\"language-text\">data.TYPE.NAME.result.ATTR</code>,\nor in our case, <code class=\"language-text\">${data.external.swarm_join_token.result.worker}</code>. The program\nis an executable separate from <code class=\"language-text\">terraform</code> which accepts a <code class=\"language-text\">query</code> through\n<code class=\"language-text\">stdin</code> as a JSON object and returns back a JSON object over <code class=\"language-text\">stdout</code>. You can\nuse any language you like, but for our purposes it is simple enough to write a\nshell script. Create a file called <code class=\"language-text\">get-join-tokens.sh</code> with the following\ncontents:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/usr/bin/env bash\n\n# Exit if any of the intermediate steps fail\nset -e\n\n# Extract input variables\neval &quot;$(jq -r &#39;@sh &quot;HOST=\\(.host)&quot;&#39;)&quot;\n\n# Get worker join token\nWORKER=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$HOST docker swarm join-token worker -q)\nMANAGER=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$HOST docker swarm join-token manager -q)\n\n# Pass back a JSON object\njq -n --arg worker $WORKER --arg manager $MANAGER &#39;{&quot;worker&quot;:$worker,&quot;manager&quot;:$manager}&#39;</code></pre></div>\n<p>And make sure the file is executable:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">chmod +x get-join-tokens.sh</code></pre></div>\n<p>In order for this script to work you must have <code class=\"language-text\">jq</code> installed on the same\nmachine you are running <code class=\"language-text\">terraform</code> on. If you are on macOS with <a href=\"https://brew.sh/\" title=\"Homebrew Package Manager\">Homebrew</a>\ninstalled this is as simple as running <code class=\"language-text\">brew install jq</code>. <code class=\"language-text\">jq</code> is a small\nutility which lets you deal with JSON directly in your shell without having to\nwrite weird <code class=\"language-text\">sed</code> things. The script receives a <code class=\"language-text\">host</code> parameter which it uses\nto execute two commands on the remote host over <code class=\"language-text\">ssh</code>. The first command\nretrieves the worker join token, and the second command retrieves the manager\njoin token (not explicitly required for what we're doing, but it's still handy\nto have).</p>\n<p>If you run <code class=\"language-text\">terraform plan</code> you should see that <code class=\"language-text\">terraform</code> plans on creating\nthree new machines. Run <code class=\"language-text\">terraform apply</code> to get three new machines and have\nthem join the <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> cluster. The machines will be created in parallel\nsince they do not have any dependencies between each other, they only depend on\nthe manager node. If you didn't already run <code class=\"language-text\">terraform apply</code> from before then\n<code class=\"language-text\">terraform</code> will create and provision the manager node first and then create and\nprovision the worker nodes.</p>\n<h2>Deploying a Service to the <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> Cluster</h2>\n<p>We now have a four-machine <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> cluster running on <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a>. How\ndo we deploy a service to the cluster? We'll have to <code class=\"language-text\">ssh</code> in to the manager\nnode and run a command there. How do we <code class=\"language-text\">ssh</code> into the manager node without\nknowing its IP address off hand? We could look up the IP address in our\n<a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> control panel; however, <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> has a better way: <a href=\"https://www.terraform.io/docs/configuration/outputs.html\" title=\"Output Variables\">output\nvariables</a>. Create a file called <code class=\"language-text\">outputs.tf</code> with the following\ncontents:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">output &quot;manager_public_ip&quot; {\n  value = &quot;${digitalocean_droplet.docker_swarm_manager.ipv4_address}&quot;\n}</code></pre></div>\n<p>With that file created run <code class=\"language-text\">terraform apply</code>. There won't be any changes made to\nour infrastructure; however, after <code class=\"language-text\">terraform apply</code> has run we will see the\npublic IP address of the manager node. We can also retrieve the IP address at\nany time with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">terraform output manager_public_ip</code></pre></div>\n<p>With that available to us, we can <code class=\"language-text\">ssh</code> into the manager node as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">ssh root@$(terraform output manager_public_ip)</code></pre></div>\n<p>Now that we are in the machine, we can deploy, for example, an <code class=\"language-text\">nginx</code> service\nwith two replicas:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">docker service create -d --name nginx -p 80:80 --replicas 2 nginx</code></pre></div>\n<p>Wait just a bit, and you can see that two replicas of <code class=\"language-text\">nginx</code> have been deployed\nacross the swarm:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker service ps nginx\nID                  NAME                IMAGE               NODE                    DESIRED STATE       CURRENT STATE           ERROR               PORTS\nx21ipowx6fjo        nginx.1             nginx:latest        docker-swarm-worker-1   Running             Running 3 seconds ago\npjq7e6yzlnxt        nginx.2             nginx:latest        docker-swarm-worker-2   Running             Running 3 seconds ago</code></pre></div>\n<p>In this case you can see that the two replicas have been deployed to two of the\nworker nodes. To access your service you can use any of the public IP addresses\nin the swarm, including the manager node or <code class=\"language-text\">docker-swarm-worker-0</code>, neither of\nwhich have the service deployed on them. Back on your local machine:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">curl $(terraform output manager_public_ip)</code></pre></div>\n<p>You should see some generic nginx welcome HTML in your terminal. Huzzah!</p>\n<h2>Adding a Public Load Balancer</h2>\n<p>So now with the swarm set up, how do we let others access our service? We could\ngive everyone the IP address of our manager node, or of any other arbitrary\nnode, but there's a better way. Let's use <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> to provision a public load\nbalancer! This will require a few changes. First, add the following to\n<code class=\"language-text\">main.tf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;digitalocean_tag&quot; &quot;docker_swarm_public&quot; {\n  name = &quot;docker-swarm-public&quot;\n}\n\nresource &quot;digitalocean_loadbalancer&quot; &quot;public&quot; {\n  name = &quot;docker-swarm-public-loadbalancer&quot;\n  region = &quot;nyc3&quot;\n  droplet_tag = &quot;${digitalocean_tag.docker_swarm_public.name}&quot;\n\n  forwarding_rule {\n    entry_port = 80\n    entry_protocol = &quot;http&quot;\n    target_port = 80\n    target_protocol = &quot;http&quot;\n  }\n\n  healthcheck {\n    port = 22\n    protocol = &quot;tcp&quot;\n  }\n}</code></pre></div>\n<p>By now you should be able to read <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> configuration files. Here we're\ndefining a tag to use identity our machines as well as a load balancer which\nwill balance traffic between machines which have that tag. To tag our machines,\nwe'll have to edit the resource blocks to reference the tags:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;digitalocean_droplet&quot; &quot;docker_swarm_manager&quot; {\n  # ...\n  tags = [&quot;${digitalocean_tag.docker_swarm_public.id}&quot;]\n  # ...\n}\n\nresource &quot;digitalocean_droplet&quot; &quot;docker_swarm_worker&quot; {\n  # ...\n  tags = [&quot;${digitalocean_tag.docker_swarm_public.id}&quot;]\n  # ...\n}</code></pre></div>\n<p>One more step. Add an output variable to <code class=\"language-text\">outputs.tf</code> for the public IP address\nof the load balancer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">output &quot;loadbalancer_public_ip&quot; {\n  value = &quot;${digitalocean_loadbalancer.public.ip}&quot;\n}</code></pre></div>\n<p>If you run <code class=\"language-text\">terraform plan</code> you will see that <code class=\"language-text\">terraform</code> plans to <em>modify</em> all\nfour machines by adding a tag to them. This operation does not require\nrestarting or recreating the machines. It will also provision a load balancer.\nRun <code class=\"language-text\">terraform apply</code>. When everything is done you'll see an IP address you can\nuse to access the load balancer. You can also access the load balancer similarly\nto how we accessed the manager node before:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">curl $(terraform output loadbalancer_public_ip)</code></pre></div>\n<p>Which node did the output come from? It doesn't matter. The load balancer gave\nour request to one of the nodes. The swarm took over from there, routing our\nrequest to an available service.</p>\n<h2>Scaling Horizontally</h2>\n<p>Horizontal scaling means to add more nodes to the swarm so we can handle more\ncontainers and services. Now that everything is set up it is super easy to\nhorizontally scale our swarm. Simply update the <code class=\"language-text\">count</code> configuration for the\nworker nodes. For instance, if you change it from <code class=\"language-text\">3</code> to <code class=\"language-text\">5</code> and run <code class=\"language-text\">terraform\nplan</code> you will see that it plans to create and provision two new worker nodes.\nBecause of our tag the machines will automatically be added to the public load\nbalancer.</p>\n<p>What if we want to scale down? It turns out we've created too many machines and\nwe simply don't need them all. Well, change <code class=\"language-text\">5</code> down to say, <code class=\"language-text\">1</code> and run\n<code class=\"language-text\">terraform plan</code>. You will see that <code class=\"language-text\">terraform</code> plans to destroy four machines.\nWhat if one of those machines has a service replica deployed to it? In the case\nof <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> this isn't a big deal. When a machine goes down or leaves the\nswarm <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> is smart enough to deploy new replicas on the machines\nwhich remain a part of the swarm. You can verify this by changing the count to\n<code class=\"language-text\">1</code>, running <code class=\"language-text\">terraform apply</code> and then accessing the manager node via <code class=\"language-text\">ssh</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ssh root@$(terraform output manager_public_ip)\n$ docker service ps nginx\nID                  NAME                IMAGE               NODE                    DESIRED STATE       CURRENT STATE                 ERROR               PORTS\nq0n2j4vqva2j        nginx.1             nginx:latest        docker-swarm-worker-0   Running             Running about a minute ago\nx21ipowx6fjo         \\_ nginx.1         nginx:latest        docker-swarm-worker-1   Shutdown            Running 30 minutes ago\nnobk0pw4pq57        nginx.2             nginx:latest        docker-swarm-manager    Running             Running about a minute ago\nmis7c3lc5e4y         \\_ nginx.2         nginx:latest        docker-swarm-worker-4   Shutdown            Assigned about a minute ago\npjq7e6yzlnxt         \\_ nginx.2         nginx:latest        docker-swarm-worker-2   Shutdown            Running 30 minutes ago</code></pre></div>\n<p>You can see that as machines were destroyed <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> moved the replicas\naround to ensure that we always had two replicas of the <code class=\"language-text\">nginx</code> service\navailable.</p>\n<h2>Scaling Vertically</h2>\n<p>Scaling vertically means to add more resources (ram, cpu, disk, network, etc) to\nthe machines we already have rather than simply adding more machines to the\nswarm. Scaling out horizontally is easy, just add more machines by changing a\nsingle parameter! Scaling vertically, however, is a bit more involved and\noutside the scope of this article. The problem is that vertically scaling a\nmachine requires the machine to be temporarily shut down. <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> would do\nthis to our machines in parallel meaning that we'd lose our swarm while it is\nscaling. Not good!</p>\n<p>The solution is to force <code class=\"language-text\">terraform</code> to run serially:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">terraform apply --parallelism 1</code></pre></div>\n<p>This will make <code class=\"language-text\">terraform</code> modify only one machine at a time instead of all at\nonce. This will take a while, but it is better than having the entire swarm go\ndown.</p>\n<p>Another workaround is to add brand new larger machines to the swarm and then\nslowly destroy the smaller machines. In this case you would add the larger\nmachines as new resources, run <code class=\"language-text\">terraform apply</code>, and then reduce the count of\nthe smaller machines until you're ready to remove the small machine\nconfiguration altogether (which tells <code class=\"language-text\">terraform</code> to destroy the machines). It\nis also worth noting for this approach that <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> lets you have\nmultiple manager nodes in one swarm. Before destroying any  smaller resources it\nwould be a good idea to add a large manager node to the swarm, then you can\nsafely remove all the smaller resources.</p>\n<h2>Cleaning Up</h2>\n<p>To clean up everything just run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">terraform destroy</code></pre></div>\n<p>This will destroy and remove everything <code class=\"language-text\">terraform</code> has created and managed for\nyou. Everything from the public ssh key in your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> account to the\nmachines and load balancer you created will be gone. If you want to see what\n<code class=\"language-text\">terraform destroy</code> will do before you run it you can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">terraform plan -destroy</code></pre></div>\n<p>Along the way we were executing <code class=\"language-text\">terraform apply</code> to make changes to our\ninfrastructure. We happened to go in an order that allowed <code class=\"language-text\">terraform</code> to\nincrementally build our infrastructure. That said, now that we have nothing\n<code class=\"language-text\">terraform plan</code> and <code class=\"language-text\">terraform apply</code> will still work. If you run <code class=\"language-text\">terraform\napply</code> you will see <code class=\"language-text\">terraform</code> create a public key in your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a>\naccount in parallel with a load balancer. After the key is created (though not\nnecessarily after the load balancer is created) <code class=\"language-text\">terraform</code> will make a machine\nto act as the <a href=\"https://docs.docker.com/engine/swarm/\" title=\"Docker Swarm\">Docker Swarm</a> manager node. After the manager node has been\ncreated it will make the worker nodes and all of the nodes will be publicly load\nbalanced. <code class=\"language-text\">terraform</code> knows the order it needs to create resources in regardless\nof the order you define resources in because it is able to infer dependencies\nbetween resources based on the attributes you use to configure resources.</p>\n<h2>Usages</h2>\n<p>We just demonstrated demonstrated using <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> to create and manage\ninfrastructure. However, usage of <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is not limited to simply\nprovisioning production infrastructure. Consider the following use cases.</p>\n<h3>Staging Environments</h3>\n<p>Now that you have a command to spin up infrastructure at will you can create\nidentical environments very easily. With one more variable to control resource\nnames you can create an identical staging environment to try out new things in.\nIf anything gets messed up beyond repair just run <code class=\"language-text\">terraform destroy &amp;&amp;\nterraform apply</code> and you're back to good as new!</p>\n<h3>Test Environments</h3>\n<p>With <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> you can easily spin up new infrastructure for the sole purpose\nof running end-to-end tests before a production deployment. In an era where\ncloud providers charge by the hour it is very cheap to provision and tear down\ninfrastructure on a whim.</p>\n<h3>Demo Environments</h3>\n<p>In a similar vein to spinning up environments for the sole purpose of testing\nyou can spin up environments for the sole purpose of demos. Who needs to demo\noff of staging or production when you can get a fresh environment lickety–split?</p>\n<h3>Customer Environments</h3>\n<p>Finally, in the case where you want to run individual customers on their own\ninfrastructure it's easy to spin up identical infrastructure as needed. Not only\nis spinning up new infrastructure simple but updating existing infrastructure is\ndead simple. Need to add an extra web server to a bunch of identical\nenvironments? No problem. Some customers require more resources than others?\n<a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">Variables</a> to the rescue!</p>\n<h2>Odds and Ends</h2>\n<h3>Configuration Management (<a href=\"https://www.chef.io/\" title=\"Chef\">Chef</a>)</h3>\n<p><a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is explicitly <a href=\"https://www.terraform.io/intro/vs/chef-puppet.html\" title=\"Terraform vs. Chef, Puppet, etc.\">not a configuration management tool</a>. You\nmay have noticed that we didn't follow basic security measures in setting up our\nnodes. We didn't set up a firewall, turn off SSH password access, turn off root\naccess over SSH, or even create non-root users. These tasks are better left to a\ntool like <a href=\"https://www.chef.io/\" title=\"Chef\">Chef</a> which will make configuration easier to manage throughout the\nlifetime of your resources. <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> even ships with a <a href=\"https://www.terraform.io/docs/provisioners/chef.html\" title=\"Terraform Chef Provisioner\">Chef provisioner</a>\nwhich will install, configure, and run the <a href=\"https://www.chef.io/\" title=\"Chef\">Chef</a> client on a remote resource\nand a <a href=\"https://www.terraform.io/docs/providers/chef/index.html\" title=\"Terraform Chef Provider\">Chef provider</a> which can manage resources that exist within a <a href=\"https://www.chef.io/\" title=\"Chef\">Chef</a>\nserver.</p>\n<h3>Other Resources and Providers</h3>\n<p><a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is not limited to spinning up virtual hardware in the cloud. It can\nprovision DNS (<a href=\"https://www.terraform.io/docs/providers/dnsimple/index.html\" title=\"Terraform DNSimple Provider\">DNSimple</a>, <a href=\"https://www.terraform.io/docs/providers/cloudflare/index.html\" title=\"Terraform CloudFlare Provider\">CloudFlare</a>, <a href=\"https://www.terraform.io/docs/providers/index.html\" title=\"Terraform Official Providers\">etc</a>), source code repositories\n(including setting up webhooks for <a href=\"https://www.terraform.io/docs/providers/github/index.html\" title=\"Terraform GitHub Provider\">GitHub</a>, <a href=\"https://www.terraform.io/docs/providers/gitlab/index.html\" title=\"Terraform GitLab Provider\">GitLab</a>, and <a href=\"https://www.terraform.io/docs/providers/bitbucket/index.html\" title=\"Terraform BitBucket Provider\">BitBucket</a>), bare\nmetal servers (<a href=\"https://www.terraform.io/docs/providers/packet/index.html\" title=\"Terraform Packet Providers\">Packet</a>, <a href=\"https://www.terraform.io/docs/providers/scaleway/index.html\" title=\"Terraform Scaleway Provider\">Scaleway</a>, <a href=\"https://www.terraform.io/docs/providers/index.html\" title=\"Terraform Official Providers\">etc</a>), most resources on <a href=\"https://www.terraform.io/docs/providers/aws/index.html\" title=\"Terraform Amazon Web Services Provider\">AWS</a> and <a href=\"https://www.terraform.io/docs/providers/google/index.html\" title=\"Terraform Google Cloud Platform Provider\">GCP</a>,\nresources within databases (<a href=\"https://www.terraform.io/docs/providers/postgresql/index.html\" title=\"Terraform PostgreSQL Provider\">PostgreSQL</a>, <a href=\"https://www.terraform.io/docs/providers/mysql/index.html\" title=\"Terraform MySQL Provider\">MySQL</a>), and even set up services\nlike <a href=\"https://www.terraform.io/docs/providers/pagerduty/index.html\" title=\"Terraform PagerDuty Provider\">PagerDuty</a> and <a href=\"https://www.terraform.io/docs/providers/mailgun/index.html\" title=\"Terraform Mailgun Provider\">Mailgun</a>. <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> has a lot of capabilities -- I've\nonly really scratched the surface here. Be sure to check out <a href=\"https://www.terraform.io/docs/providers/index.html\" title=\"Terraform Official Providers\">the full list of\nofficial providers</a> as well as <a href=\"https://www.terraform.io/docs/provisioners/index.html\" title=\"Terraform Official Provisioners\">the documentation for official\nprovisioners</a>.</p>\n<h3>Managing Configuration</h3>\n<p>Since infrastructure in <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is represented as code it is very easy to\ncheck in to version control. It's a good idea to make a commit before running\n<code class=\"language-text\">terraform apply</code>, and you should never run <code class=\"language-text\">terraform apply</code> more than once\nwithout committing in between -- you're just inviting a world full of hurt\notherwise.</p>\n<p>You may also want to refactor common configuration into <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a>. For\ninstance, I used the same droplet size for all of my nodes -- that could have\nbeen a variable. For an example that uses more <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a>, check out <a href=\"https://github.com/knpwrs/docker-swarm-terraform\" title=\"knpwrs/docker-swarm-terraform\">this\npost's accompanying repository</a>.</p>\n<p>On the topic of <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a>, it's a good idea to keep sensitive information\n(such as your <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">DigitalOcean</a> API token) in variables. If you use a\n<code class=\"language-text\">terraform.tfvars</code> file that has sensitive information in it you should place\nthat file in your <code class=\"language-text\">.gitignore</code> so it doesn't get committed.</p>\n<p>For more information on <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">variables</a>, check out the <a href=\"https://www.terraform.io/docs/configuration/variables.html\" title=\"Terraform Variables\">official variables\ndocumentation</a>.</p>\n<h3><a href=\"https://www.terraform.io/docs/backends/index.html\" title=\"Terraform Backends\">Backends</a></h3>\n<p>Throughout this article we've been running and provisioning everything from our\nlocal machine. But what if we're working on a team and we want to share the\nstate of our infrastructure? What if provisioning resources will just take a\nlong time and we don't want to depend on our local machine being available?\nThat's where <a href=\"https://www.terraform.io/docs/backends/index.html\" title=\"Terraform Backends\">backends</a> come in. <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> supports a number of <a href=\"https://www.terraform.io/docs/backends/index.html\" title=\"Terraform Backends\">backends</a>\nincluding <a href=\"https://www.terraform.io/docs/backends/types/s3.html\" title=\"Terraform S3 Backend\">S3</a> and <a href=\"https://www.terraform.io/docs/backends/types/s3.html\" title=\"Terraform gcs Backend\">gcs</a>, be sure to check out the full list of <a href=\"https://www.terraform.io/docs/backends/types/index.html\" title=\"Terraform Backend Types\">backend types</a>.</p>\n<h3>What if I want to manage my existing infrastructure with <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a>?</h3>\n<p>If you have existing infrastructure you'd like to start managing with\n<a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> you're in luck. <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> has a mechanism which allows you to\n<a href=\"https://www.terraform.io/docs/import/index.html\" title=\"Terraform Import\">import existing infrastructure</a>. The specifics are outside the scope of\nthis article, but if you find yourself wanting to let <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> manage\nexisting infrastructure be sure to check out <a href=\"https://www.terraform.io/docs/import/index.html\" title=\"Terraform Import\">the page on importing existing\ninfrastructure</a>.</p>\n<h2>Conclusion</h2>\n<p><a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is a powerful tool which makes provisioning and managing\ninfrastructure easy. While other tools like <a href=\"https://www.chef.io/\" title=\"Chef\">Chef</a> are focused on managing how\nsoftware and configuration is deployed across existing infrastructure,\n<a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is focused on the (virtual) hardware side of things allowing you to\neasily and repeatedly deploy and update infrastructure. Whether you're looking\nto quickly try things out on <a href=\"https://m.do.co/c/41b1b93b4c2d\" title=\"$10 Free Credit on DigitalOcean\">your favorite cloud provider</a> or you\nneed a way to reliably manage large pieces of infrastructure, <a href=\"https://www.terraform.io/\" title=\"Terraform\">Terraform</a> is\nlikely the tool for you. Feel free to check out <a href=\"https://github.com/knpwrs/docker-swarm-terraform\" title=\"knpwrs/docker-swarm-terraform\">this article's accompanying\nGitHub repository</a> for a complete working example.</p>","id":"82e7e2a4-e04f-5ddf-acdf-98baee923afc","timeToRead":24,"frontmatter":{"date":"June 04, 2017","path":"/blog/docker-swarm-terraform","tags":"docker, terraform, devops","title":"Creating and Scaling a Docker Swarm Cluster with Terraform"}},{"html":"<p>After discovering that the site viaggiatreno.it and lefreccie.it kindly offers some API to their train data i decided to implement my own monitoring system to get a complete overview of what is happening\nin the public train system and never miss a train.<br><br></p>\n<p><img src=\"https://raw.githubusercontent.com/fnzv/fnzv.github.io/master/imgs/grafana-dash.png\"></p>\n<p><br><br><br> </p>\n<h2>Master Plan:</h2>\n<ol>\n<li>Scrape all data available (Train departure/arrival,delays,stations....) <br></li>\n<li>Standardize the format so i can implement pluggable systems (Grafana, Telegram Bot, Website, Twitter..)<br></li>\n<li>At least have fun when i hear \"We are sorry for the inconvenience\" while i check my systems<br>\n<br><br></li>\n</ol>\n<h2>Scraping all the relevant datasets<br></h2>\n<p>All the data is collected with a script every 30 minutes using as input the site APIs and station lists, the ouput will be saved into InfluxDB (Legit, delay time tracking with timeseries DBs)\nand a local folder for historical data that i will use later with git.<br>\n<br><br> </p>\n<h2>Standardize format <br></h2>\n<p>To allow multiple systems comunicate together you always need to take raw data (train datasets) and standardize it into a more pluggable format:</p>\n<ul>\n<li>InfluxDB  (Pros: A lot of client support, Grafana, Alerts, SQL...  Cons: Some more resources usage)</li>\n<li>Git+Local (Pros: Efficent historical data tracking and easy full-text search...  Cons: None)\n<br><br> </li>\n</ul>\n<h2>Developing \"Pluggable\" systems:<br></h2>\n<ul>\n<li>The Grafana Dashboard gathers all the relevant metrics that i cherry picked from InfluxDB (Train departure/arrival, delay, last station detected, train number, timestamp).\nWith this datasets i could easily create a dashboard that can really give you all the information that you can see on station information display sistems.\n<br><br> <img src=\"https://raw.githubusercontent.com/fnzv/fnzv.github.io/master/imgs/delays-dash.png\"> <br></li>\n<li>The telegram bot <a href=\"https://t.me/Trenordalerts_bot\">https://t.me/Trenordalerts_bot</a> is written in Go and with under 300 lines of code is it possible to read all the collected data of delays and comunicate them to the user.\nThe alerting part of the bot is more complex than the \"Give me info of xyz train\" because i need to identify the user before sending an alert (obvious.. i don't want to recieve alerts of my friend's train) so i implemented\na connector with a relational DB where i track chat_ids and alerts. <br></li>\n<li>Static Website <a href=\"https://trenistats.it/\">https://trenistats.it</a> <br>\nThis is where the magic happens <a href=\"https://d3js.org/\"></a>, the flow of the data is very simple now and i just need to gather data from one of my inputs (InfluxDB,Git or Local Dir) and show some graphs.\nHow?\nThe html code is automatically generated via a running script that collects the data from the local repo and generates the index.html for the static site.\nEven if i'm not a frontend specialist i managed to make something cool out of it (pure google fu skills and design 101)</li>\n<li>Twitter bot <a href=\"https://twitter.com/trenistats\">https://twitter.com/trenistats</a> <br>\nThe bot gathers information from the local repo and triggers alerts via Twitter APIs if trains start/have long delays and tagging the main italian company that's responsible for the transportation system.\nLike the Telegram bot this is written in Go with very few lines, basicaly take what i have already did for Telegram + Twitter API integration.\n<br><br></li>\n</ul>\n<p>That's it, i could have gone far into dashboarding and alerting but this setup seems to work fine for me. <br>\nI tried integrating Elasticsearch + Kibana for more fun stuff but Influx + Grafana did the job very well (it just works.. and no json decoding fights). <br></p>\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/fnzv/fnzv.github.io/master/imgs/jsonmeme.jpeg?raw=true\" alt=\"Sublime&apos;s custom image\">\n</p>","id":"c6167bac-ca35-54c7-8317-760b95d144de","timeToRead":2,"frontmatter":{"date":"June 04, 2017","path":"/blog/docker-swarm-terraform","tags":"docker, terraform, devops","title":"Creating and Scaling a Docker Swarm Cluster with Terraform"}}],"tag":"devops","pagesSum":1,"page":1}}}